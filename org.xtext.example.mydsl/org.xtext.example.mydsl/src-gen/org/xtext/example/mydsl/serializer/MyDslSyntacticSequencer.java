/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Ampersand_Rule_EqualsSignKeyword_1_1_q;
	protected AbstractElementAlias match_Array_initializer_CommaKeyword_2_2_q;
	protected AbstractElementAlias match_Creating_Expression_LeftSquareBracketRightSquareBracketKeyword_1_1_1_1_q;
	protected AbstractElementAlias match_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p;
	protected AbstractElementAlias match_Literal_Expression_LONGTerminalRuleCall_0_0_1_q;
	protected AbstractElementAlias match_Literal_Expression_LONGTerminalRuleCall_0_1_1_q;
	protected AbstractElementAlias match_Method_declaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a;
	protected AbstractElementAlias match_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p;
	protected AbstractElementAlias match_Statement_SemicolonKeyword_15_1_or___BreakKeyword_13_1_SemicolonKeyword_13_3___or___ContinueKeyword_14_1_SemicolonKeyword_14_3___or___ThrowKeyword_9_1_SemicolonKeyword_9_3__;
	protected AbstractElementAlias match_Switch_statement___DefaultKeyword_6_1_0_COLONTerminalRuleCall_6_1_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Ampersand_Rule_EqualsSignKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getAmpersand_RuleAccess().getEqualsSignKeyword_1_1());
		match_Array_initializer_CommaKeyword_2_2_q = new TokenAlias(false, true, grammarAccess.getArray_initializerAccess().getCommaKeyword_2_2());
		match_Creating_Expression_LeftSquareBracketRightSquareBracketKeyword_1_1_1_1_q = new TokenAlias(false, true, grammarAccess.getCreating_ExpressionAccess().getLeftSquareBracketRightSquareBracketKeyword_1_1_1_1());
		match_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getCreating_ExpressionAccess().getLeftSquareBracketRightSquareBracketKeyword_1_1_2_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCreating_ExpressionAccess().getLeftSquareBracketKeyword_1_1_2_0_0()), new TokenAlias(false, false, grammarAccess.getCreating_ExpressionAccess().getRightSquareBracketKeyword_1_1_2_0_1())));
		match_Literal_Expression_LONGTerminalRuleCall_0_0_1_q = new TokenAlias(false, true, grammarAccess.getLiteral_ExpressionAccess().getLONGTerminalRuleCall_0_0_1());
		match_Literal_Expression_LONGTerminalRuleCall_0_1_1_q = new TokenAlias(false, true, grammarAccess.getLiteral_ExpressionAccess().getLONGTerminalRuleCall_0_1_1());
		match_Method_declaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getMethod_declarationAccess().getLeftSquareBracketKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getMethod_declarationAccess().getRightSquareBracketKeyword_6_1()));
		match_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getParameterAccess().getLeftSquareBracketRightSquareBracketKeyword_2_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getParameterAccess().getLeftSquareBracketKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getParameterAccess().getRightSquareBracketKeyword_2_0_1())));
		match_Statement_SemicolonKeyword_15_1_or___BreakKeyword_13_1_SemicolonKeyword_13_3___or___ContinueKeyword_14_1_SemicolonKeyword_14_3___or___ThrowKeyword_9_1_SemicolonKeyword_9_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getBreakKeyword_13_1()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_13_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getContinueKeyword_14_1()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_14_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getThrowKeyword_9_1()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_9_3())), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_15_1()));
		match_Switch_statement___DefaultKeyword_6_1_0_COLONTerminalRuleCall_6_1_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSwitch_statementAccess().getDefaultKeyword_6_1_0()), new TokenAlias(false, false, grammarAccess.getSwitch_statementAccess().getCOLONTerminalRuleCall_6_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getCOLONRule())
			return getCOLONToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getEXTENDSRule())
			return getEXTENDSToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getINSTANCEOFRule())
			return getINSTANCEOFToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getINTERFACERule())
			return getINTERFACEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getLONGRule())
			return getLONGToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getLPARENRule())
			return getLPARENToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getL_CURLY_BRACERule())
			return getL_CURLY_BRACEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNEWRule())
			return getNEWToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNOTRule())
			return getNOTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getRPARENRule())
			return getRPARENToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getR_CURLY_BRACERule())
			return getR_CURLY_BRACEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getWATRule())
			return getWATToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COLON:
	 * 	":"
	 * ;
	 */
	protected String getCOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal EXTENDS:
	 * 	"extends"
	 * ;
	 */
	protected String getEXTENDSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "extends";
	}
	
	/**
	 * terminal INSTANCEOF:
	 * 	"instanceof"
	 * ;
	 */
	protected String getINSTANCEOFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "instanceof";
	}
	
	/**
	 * terminal INTERFACE:
	 * 	"interface"
	 * ;
	 */
	protected String getINTERFACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "interface";
	}
	
	/**
	 * terminal LONG:
	 * 	"l"
	 * ;
	 */
	protected String getLONGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "l";
	}
	
	/**
	 * terminal LPAREN:
	 * 	"("
	 * ;
	 */
	protected String getLPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal L_CURLY_BRACE:
	 * 	"}"
	 * ;
	 */
	protected String getL_CURLY_BRACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "}";
	}
	
	/**
	 * terminal NEW:
	 * 	"new"	
	 * ;
	 */
	protected String getNEWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "new";
	}
	
	/**
	 * terminal NOT:
	 * 	"~"
	 * ;
	 */
	protected String getNOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "~";
	}
	
	/**
	 * terminal RPAREN:
	 * 	")"
	 * ;
	 */
	protected String getRPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal R_CURLY_BRACE:
	 * 	"{"
	 * ;
	 */
	protected String getR_CURLY_BRACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{";
	}
	
	/**
	 * terminal WAT:
	 * 	"?"
	 * ;
	 */
	protected String getWATToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "?";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Ampersand_Rule_EqualsSignKeyword_1_1_q.equals(syntax))
				emit_Ampersand_Rule_EqualsSignKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Array_initializer_CommaKeyword_2_2_q.equals(syntax))
				emit_Array_initializer_CommaKeyword_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Creating_Expression_LeftSquareBracketRightSquareBracketKeyword_1_1_1_1_q.equals(syntax))
				emit_Creating_Expression_LeftSquareBracketRightSquareBracketKeyword_1_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p.equals(syntax))
				emit_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Literal_Expression_LONGTerminalRuleCall_0_0_1_q.equals(syntax))
				emit_Literal_Expression_LONGTerminalRuleCall_0_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Literal_Expression_LONGTerminalRuleCall_0_1_1_q.equals(syntax))
				emit_Literal_Expression_LONGTerminalRuleCall_0_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Method_declaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a.equals(syntax))
				emit_Method_declaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p.equals(syntax))
				emit_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Statement_SemicolonKeyword_15_1_or___BreakKeyword_13_1_SemicolonKeyword_13_3___or___ContinueKeyword_14_1_SemicolonKeyword_14_3___or___ThrowKeyword_9_1_SemicolonKeyword_9_3__.equals(syntax))
				emit_Statement_SemicolonKeyword_15_1_or___BreakKeyword_13_1_SemicolonKeyword_13_3___or___ContinueKeyword_14_1_SemicolonKeyword_14_3___or___ThrowKeyword_9_1_SemicolonKeyword_9_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Switch_statement___DefaultKeyword_6_1_0_COLONTerminalRuleCall_6_1_1__a.equals(syntax))
				emit_Switch_statement___DefaultKeyword_6_1_0_COLONTerminalRuleCall_6_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     a1=AMPERSAND (ambiguity) (rule end)
	 */
	protected void emit_Ampersand_Rule_EqualsSignKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     variableinitializer+=Variable_initializer (ambiguity) L_CURLY_BRACE (rule end)
	 */
	protected void emit_Array_initializer_CommaKeyword_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     typeSpecifier=Type_specifier (ambiguity) ('[]'? ('[' ']')?)+ (rule end)
	 */
	protected void emit_Creating_Expression_LeftSquareBracketRightSquareBracketKeyword_1_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[]'? ('[' ']')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=Expression ']' (ambiguity) (rule end)
	 *     typeSpecifier=Type_specifier '[]'? (ambiguity) (rule end)
	 */
	protected void emit_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     LONG?
	 *
	 * This ambiguous syntax occurs at:
	 *     exp=HEXA (ambiguity) (rule end)
	 */
	protected void emit_Literal_Expression_LONGTerminalRuleCall_0_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     LONG?
	 *
	 * This ambiguous syntax occurs at:
	 *     exp1=DECIMAL_DIGITS (ambiguity) (rule end)
	 */
	protected void emit_Literal_Expression_LONGTerminalRuleCall_0_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     rparent=RPAREN (ambiguity) debug=';'
	 *     rparent=RPAREN (ambiguity) statementMethod=Statement_block
	 */
	protected void emit_Method_declaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[]'? ('[' ']')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     parameterName=ID (ambiguity) (rule end)
	 */
	protected void emit_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';' | ('throw' ';') | ('break' ';') | ('continue' ';')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Statement_SemicolonKeyword_15_1_or___BreakKeyword_13_1_SemicolonKeyword_13_3___or___ContinueKeyword_14_1_SemicolonKeyword_14_3___or___ThrowKeyword_9_1_SemicolonKeyword_9_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('default' COLON)*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression2+=Expression COLON (ambiguity) 'case' expression2+=Expression
	 *     expression2+=Expression COLON (ambiguity) L_CURLY_BRACE (rule end)
	 *     expression2+=Expression COLON (ambiguity) switchStatements+=Statement
	 *     rparent=RPAREN R_CURLY_BRACE (ambiguity) 'case' expression2+=Expression
	 *     rparent=RPAREN R_CURLY_BRACE (ambiguity) L_CURLY_BRACE (rule end)
	 *     rparent=RPAREN R_CURLY_BRACE (ambiguity) switchStatements+=Statement
	 *     switchStatements+=Statement (ambiguity) 'case' expression2+=Expression
	 *     switchStatements+=Statement (ambiguity) L_CURLY_BRACE (rule end)
	 *     switchStatements+=Statement (ambiguity) switchStatements+=Statement
	 */
	protected void emit_Switch_statement___DefaultKeyword_6_1_0_COLONTerminalRuleCall_6_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
