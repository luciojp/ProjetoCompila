/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Ampersand_Rule;
import org.xtext.example.mydsl.myDsl.Arg_List;
import org.xtext.example.mydsl.myDsl.Array_initializer;
import org.xtext.example.mydsl.myDsl.Bit_Expression_NR;
import org.xtext.example.mydsl.myDsl.Cast_Expression;
import org.xtext.example.mydsl.myDsl.Class_declaration;
import org.xtext.example.mydsl.myDsl.Compilation_unit;
import org.xtext.example.mydsl.myDsl.Constructor_declaration;
import org.xtext.example.mydsl.myDsl.Creating_Expression;
import org.xtext.example.mydsl.myDsl.Do_Statement;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.Expression_aux;
import org.xtext.example.mydsl.myDsl.Field_declaration;
import org.xtext.example.mydsl.myDsl.Float_Literal;
import org.xtext.example.mydsl.myDsl.For_Statement;
import org.xtext.example.mydsl.myDsl.If_statement;
import org.xtext.example.mydsl.myDsl.Import_statement;
import org.xtext.example.mydsl.myDsl.Interface_declaration;
import org.xtext.example.mydsl.myDsl.Literal_Expression;
import org.xtext.example.mydsl.myDsl.Logical_Expression_NR;
import org.xtext.example.mydsl.myDsl.Method_declaration;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Numeric_Expression_NR;
import org.xtext.example.mydsl.myDsl.Package_statement;
import org.xtext.example.mydsl.myDsl.Parameter;
import org.xtext.example.mydsl.myDsl.Parameter_list;
import org.xtext.example.mydsl.myDsl.Statement;
import org.xtext.example.mydsl.myDsl.Statement_block;
import org.xtext.example.mydsl.myDsl.Static_initializer;
import org.xtext.example.mydsl.myDsl.Switch_statement;
import org.xtext.example.mydsl.myDsl.Try_statement;
import org.xtext.example.mydsl.myDsl.Type;
import org.xtext.example.mydsl.myDsl.Type_declaration;
import org.xtext.example.mydsl.myDsl.Type_specifier;
import org.xtext.example.mydsl.myDsl.Variable_declaration;
import org.xtext.example.mydsl.myDsl.Variable_declarator;
import org.xtext.example.mydsl.myDsl.Variable_initializer;
import org.xtext.example.mydsl.myDsl.While_Statement;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MyDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.AMPERSAND_RULE:
				sequence_Ampersand_Rule(context, (Ampersand_Rule) semanticObject); 
				return; 
			case MyDslPackage.ARG_LIST:
				sequence_Arg_List(context, (Arg_List) semanticObject); 
				return; 
			case MyDslPackage.ARRAY_INITIALIZER:
				sequence_Array_initializer(context, (Array_initializer) semanticObject); 
				return; 
			case MyDslPackage.BIT_EXPRESSION_NR:
				sequence_Bit_Expression_NR(context, (Bit_Expression_NR) semanticObject); 
				return; 
			case MyDslPackage.CAST_EXPRESSION:
				sequence_Cast_Expression(context, (Cast_Expression) semanticObject); 
				return; 
			case MyDslPackage.CLASS_DECLARATION:
				sequence_Class_declaration(context, (Class_declaration) semanticObject); 
				return; 
			case MyDslPackage.COMPILATION_UNIT:
				sequence_Compilation_unit(context, (Compilation_unit) semanticObject); 
				return; 
			case MyDslPackage.CONSTRUCTOR_DECLARATION:
				sequence_Constructor_declaration(context, (Constructor_declaration) semanticObject); 
				return; 
			case MyDslPackage.CREATING_EXPRESSION:
				sequence_Creating_Expression(context, (Creating_Expression) semanticObject); 
				return; 
			case MyDslPackage.DO_STATEMENT:
				sequence_Do_Statement(context, (Do_Statement) semanticObject); 
				return; 
			case MyDslPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case MyDslPackage.EXPRESSION_AUX:
				sequence_Expression_aux(context, (Expression_aux) semanticObject); 
				return; 
			case MyDslPackage.FIELD_DECLARATION:
				sequence_Field_declaration(context, (Field_declaration) semanticObject); 
				return; 
			case MyDslPackage.FLOAT_LITERAL:
				sequence_Float_Literal(context, (Float_Literal) semanticObject); 
				return; 
			case MyDslPackage.FOR_STATEMENT:
				sequence_For_Statement(context, (For_Statement) semanticObject); 
				return; 
			case MyDslPackage.IF_STATEMENT:
				sequence_If_statement(context, (If_statement) semanticObject); 
				return; 
			case MyDslPackage.IMPORT_STATEMENT:
				sequence_Import_statement(context, (Import_statement) semanticObject); 
				return; 
			case MyDslPackage.INTERFACE_DECLARATION:
				sequence_Interface_declaration(context, (Interface_declaration) semanticObject); 
				return; 
			case MyDslPackage.LITERAL_EXPRESSION:
				sequence_Literal_Expression(context, (Literal_Expression) semanticObject); 
				return; 
			case MyDslPackage.LOGICAL_EXPRESSION_NR:
				sequence_Logical_Expression_NR(context, (Logical_Expression_NR) semanticObject); 
				return; 
			case MyDslPackage.METHOD_DECLARATION:
				sequence_Method_declaration(context, (Method_declaration) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.NUMERIC_EXPRESSION_NR:
				sequence_Numeric_Expression_NR(context, (Numeric_Expression_NR) semanticObject); 
				return; 
			case MyDslPackage.PACKAGE_STATEMENT:
				sequence_Package_statement(context, (Package_statement) semanticObject); 
				return; 
			case MyDslPackage.PARAMETER:
				sequence_Parameter(context, (Parameter) semanticObject); 
				return; 
			case MyDslPackage.PARAMETER_LIST:
				sequence_Parameter_list(context, (Parameter_list) semanticObject); 
				return; 
			case MyDslPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case MyDslPackage.STATEMENT_BLOCK:
				sequence_Statement_block(context, (Statement_block) semanticObject); 
				return; 
			case MyDslPackage.STATIC_INITIALIZER:
				sequence_Static_initializer(context, (Static_initializer) semanticObject); 
				return; 
			case MyDslPackage.SWITCH_STATEMENT:
				sequence_Switch_statement(context, (Switch_statement) semanticObject); 
				return; 
			case MyDslPackage.TRY_STATEMENT:
				sequence_Try_statement(context, (Try_statement) semanticObject); 
				return; 
			case MyDslPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case MyDslPackage.TYPE_DECLARATION:
				sequence_Type_declaration(context, (Type_declaration) semanticObject); 
				return; 
			case MyDslPackage.TYPE_SPECIFIER:
				sequence_Type_specifier(context, (Type_specifier) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE_DECLARATION:
				sequence_Variable_declaration(context, (Variable_declaration) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE_DECLARATOR:
				sequence_Variable_declarator(context, (Variable_declarator) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE_INITIALIZER:
				sequence_Variable_initializer(context, (Variable_initializer) semanticObject); 
				return; 
			case MyDslPackage.WHILE_STATEMENT:
				sequence_While_Statement(context, (While_Statement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (a1=AMPERSAND a2=AMPERSAND?)
	 */
	protected void sequence_Ampersand_Rule(EObject context, Ampersand_Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expression=Expression expressions+=Expression*)
	 */
	protected void sequence_Arg_List(EObject context, Arg_List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((variableinitializer+=Variable_initializer variableinitializer+=Variable_initializer*)?)
	 */
	protected void sequence_Array_initializer(EObject context, Array_initializer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_Bit_Expression_NR(EObject context, Bit_Expression_NR semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BIT_EXPRESSION_NR__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BIT_EXPRESSION_NR__EXPRESSION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBit_Expression_NRAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=Type expression=Expression)
	 */
	protected void sequence_Cast_Expression(EObject context, Cast_Expression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CAST_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CAST_EXPRESSION__TYPE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CAST_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CAST_EXPRESSION__EXPRESSION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCast_ExpressionAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getCast_ExpressionAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiers+=Modifier* 
	 *         className=ID 
	 *         classHerdada=Class_name? 
	 *         (interfaceImplementada=Interface_name interfacesImplementadas+=Interface_name*)? 
	 *         fieldsDeclaration+=Field_declaration*
	 *     )
	 */
	protected void sequence_Class_declaration(EObject context, Class_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*)
	 */
	protected void sequence_Compilation_unit(EObject context, Compilation_unit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiersConstructor+=Modifier* 
	 *         nameConstructor=ID 
	 *         lParen=LPAREN 
	 *         parameterListConstructor=Parameter_list? 
	 *         rparent=RPAREN 
	 *         statementConstructor=Statement_block
	 *     )
	 */
	protected void sequence_Constructor_declaration(EObject context, Constructor_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((className=Class_name argList=Arg_List) | (typeSpecifier=Type_specifier expression=Expression?) | expression=Expression)
	 */
	protected void sequence_Creating_Expression(EObject context, Creating_Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (doStatement=Statement lparent=LPAREN rparent=RPAREN)
	 */
	protected void sequence_Do_Statement(EObject context, Do_Statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DO_STATEMENT__DO_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DO_STATEMENT__DO_STATEMENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DO_STATEMENT__LPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DO_STATEMENT__LPARENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DO_STATEMENT__RPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DO_STATEMENT__RPARENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDo_StatementAccess().getDoStatementStatementParserRuleCall_1_0(), semanticObject.getDoStatement());
		feeder.accept(grammarAccess.getDo_StatementAccess().getLparentLPARENTerminalRuleCall_3_0(), semanticObject.getLparent());
		feeder.accept(grammarAccess.getDo_StatementAccess().getRparentRPARENTerminalRuleCall_4_0(), semanticObject.getRparent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (numericExpression3=Numeric_Expression_NR aux=Expression_aux) | 
	 *         (logicalExpression=Logical_Expression_NR aux=Expression_aux) | 
	 *         (bitExpression=Bit_Expression_NR aux=Expression_aux) | 
	 *         (castExpression=Cast_Expression aux=Expression_aux) | 
	 *         (creatingExpression=Creating_Expression aux=Expression_aux) | 
	 *         (literalExpression=Literal_Expression aux=Expression_aux) | 
	 *         (null=NULL aux=Expression_aux) | 
	 *         (super=SUPER aux=Expression_aux) | 
	 *         (this=THIS aux=Expression_aux) | 
	 *         (name=ID aux=Expression_aux)
	 *     )
	 */
	protected void sequence_Expression(EObject context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Expression_aux}
	 */
	protected void sequence_Expression_aux(EObject context, Expression_aux semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Field_declaration}
	 */
	protected void sequence_Field_declaration(EObject context, Field_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (decimalDigits1=DECIMAL_DIGITS decimalDigits2=DECIMAL_DIGITS? exp=EXPOENT_PART? floatTypeSufix=FLOAT_TYPE_SUFIX?)
	 */
	protected void sequence_Float_Literal(EObject context, Float_Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((variable=Variable_declaration | expression=Expression)? expression2=Expression? expression3=Expression? statement=Statement)
	 */
	protected void sequence_For_Statement(EObject context, For_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lparen=LPAREN expression=Expression rparent=RPAREN idStatement=Statement elseStatement=Statement?)
	 */
	protected void sequence_If_statement(EObject context, If_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (className=Class_name | pacName=Package_name)
	 */
	protected void sequence_Import_statement(EObject context, Import_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiers+=Modifier* 
	 *         interfaceName=ID 
	 *         (interfaceHerdada=Interface_name interfacesHerdadas+=Interface_name*)? 
	 *         fieldsDeclaration+=Field_declaration*
	 *     )
	 */
	protected void sequence_Interface_declaration(EObject context, Interface_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (exp=HEXA | exp1=DECIMAL_DIGITS | exp2=Float_Literal | string=STRING | charLit=CHAR)
	 */
	protected void sequence_Literal_Expression(EObject context, Literal_Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((exclamation=EXCLAMATION (expression=Expression | expression=Expression)) | expression=Expression | true=TRUE | false=FALSE)
	 */
	protected void sequence_Logical_Expression_NR(EObject context, Logical_Expression_NR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         modifiersMethod+=Modifier* 
	 *         typeMethod=Type 
	 *         nameMethod=ID 
	 *         lParen=LPAREN 
	 *         parameterListMethod=Parameter_list? 
	 *         rparent=RPAREN 
	 *         (statementMethod=Statement_block | debug=';')
	 *     )
	 */
	protected void sequence_Method_declaration(EObject context, Method_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     greetings+=Compilation_unit
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((sinal_numeric='-' | sinal_numeric=INCREMENT | sinal_numeric=DECREMENT) expression=Expression)
	 */
	protected void sequence_Numeric_Expression_NR(EObject context, Numeric_Expression_NR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     pacName=Package_name
	 */
	protected void sequence_Package_statement(EObject context, Package_statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PACKAGE_STATEMENT__PAC_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PACKAGE_STATEMENT__PAC_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPackage_statementAccess().getPacNamePackage_nameParserRuleCall_1_0(), semanticObject.getPacName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=Type parameterName=ID)
	 */
	protected void sequence_Parameter(EObject context, Parameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARAMETER__TYPE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PARAMETER__PARAMETER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PARAMETER__PARAMETER_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getParameterAccess().getParameterNameIDTerminalRuleCall_1_0(), semanticObject.getParameterName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (parameter=Parameter parameters+=Parameter*)
	 */
	protected void sequence_Parameter_list(EObject context, Parameter_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((ret='return' expression=Expression?) | (expression=Expression?) | (name=ID?) | (name=ID?))
	 */
	protected void sequence_Statement(EObject context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (rCurly=R_CURLY_BRACE statments+=Statement* lCurly=L_CURLY_BRACE)
	 */
	protected void sequence_Statement_block(EObject context, Statement_block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (static=STATIC name=Statement_block)
	 */
	protected void sequence_Static_initializer(EObject context, Static_initializer semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STATIC_INITIALIZER__STATIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STATIC_INITIALIZER__STATIC));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STATIC_INITIALIZER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STATIC_INITIALIZER__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStatic_initializerAccess().getStaticSTATICTerminalRuleCall_0_0(), semanticObject.getStatic());
		feeder.accept(grammarAccess.getStatic_initializerAccess().getNameStatement_blockParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (lParen=LPAREN expression=Expression rparent=RPAREN (expression2+=Expression | switchStatements+=Statement)*)
	 */
	protected void sequence_Switch_statement(EObject context, Switch_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (tryStatement=Statement (lParen+=LPAREN parameters+=Parameter rparent+=RPAREN catchStatement+=Statement)* finallyStatement=Statement?)
	 */
	protected void sequence_Try_statement(EObject context, Try_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (typeSpecifier=Type_specifier typeVector+='[]'*)
	 */
	protected void sequence_Type(EObject context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration))
	 */
	protected void sequence_Type_declaration(EObject context, Type_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         primitiveType='boolean' | 
	 *         primitiveType='byte' | 
	 *         primitiveType='char' | 
	 *         primitiveType='short' | 
	 *         primitiveType='int' | 
	 *         primitiveType='float' | 
	 *         primitiveType='long' | 
	 *         primitiveType='double' | 
	 *         primitiveType='void' | 
	 *         className=Class_name
	 *     )
	 */
	protected void sequence_Type_specifier(EObject context, Type_specifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator names+=Variable_declarator*)
	 */
	protected void sequence_Variable_declaration(EObject context, Variable_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (nameVariable=ID (lenVector+='[' | lenVector+='[]')* vari=Variable_initializer?)
	 */
	protected void sequence_Variable_declarator(EObject context, Variable_declarator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (array_init=Array_initializer | expression=Expression)
	 */
	protected void sequence_Variable_initializer(EObject context, Variable_initializer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expression=Expression rparent=RPAREN whileStatement=Statement)
	 */
	protected void sequence_While_Statement(EObject context, While_Statement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__EXPRESSION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__RPARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__RPARENT));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__WHILE_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WHILE_STATEMENT__WHILE_STATEMENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getWhile_StatementAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getWhile_StatementAccess().getRparentRPARENTerminalRuleCall_2_0(), semanticObject.getRparent());
		feeder.accept(grammarAccess.getWhile_StatementAccess().getWhileStatementStatementParserRuleCall_3_0(), semanticObject.getWhileStatement());
		feeder.finish();
	}
}
