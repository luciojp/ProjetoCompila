/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsCompilation_unitParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Compilation_unit;
		@Override public ParserRule getRule() { return rule; }

		//greetings+=Compilation_unit
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Compilation_unit
		public RuleCall getGreetingsCompilation_unitParserRuleCall_0() { return cGreetingsCompilation_unitParserRuleCall_0; }
	}

	public class Compilation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Compilation_unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompilation_unitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePackage_statementParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImport_statementParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cTypeDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDeclarationsType_declarationParserRuleCall_3_0 = (RuleCall)cTypeDeclarationsAssignment_3.eContents().get(0);
		
		//Compilation_unit:
		//	{Compilation_unit} name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*;
		@Override public ParserRule getRule() { return rule; }

		//{Compilation_unit} name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*
		public Group getGroup() { return cGroup; }

		//{Compilation_unit}
		public Action getCompilation_unitAction_0() { return cCompilation_unitAction_0; }

		//name=Package_statement?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Package_statement
		public RuleCall getNamePackage_statementParserRuleCall_1_0() { return cNamePackage_statementParserRuleCall_1_0; }

		//imports+=Import_statement*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import_statement
		public RuleCall getImportsImport_statementParserRuleCall_2_0() { return cImportsImport_statementParserRuleCall_2_0; }

		//typeDeclarations+=Type_declaration*
		public Assignment getTypeDeclarationsAssignment_3() { return cTypeDeclarationsAssignment_3; }

		//Type_declaration
		public RuleCall getTypeDeclarationsType_declarationParserRuleCall_3_0() { return cTypeDeclarationsType_declarationParserRuleCall_3_0; }
	}

	public class Type_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClassDecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cClassDecClass_declarationParserRuleCall_1_0_0 = (RuleCall)cClassDecAssignment_1_0.eContents().get(0);
		private final Assignment cInterfaceDecAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInterfaceDecInterface_declarationParserRuleCall_1_1_0 = (RuleCall)cInterfaceDecAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Type_declaration:
		//	comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";";
		@Override public ParserRule getRule() { return rule; }

		//comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";"
		public Group getGroup() { return cGroup; }

		//comment=DOC_COMMENT?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//DOC_COMMENT
		public RuleCall getCommentDOC_COMMENTTerminalRuleCall_0_0() { return cCommentDOC_COMMENTTerminalRuleCall_0_0; }

		//(classDec=Class_declaration | interfaceDec=Interface_declaration)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//classDec=Class_declaration
		public Assignment getClassDecAssignment_1_0() { return cClassDecAssignment_1_0; }

		//Class_declaration
		public RuleCall getClassDecClass_declarationParserRuleCall_1_0_0() { return cClassDecClass_declarationParserRuleCall_1_0_0; }

		//interfaceDec=Interface_declaration
		public Assignment getInterfaceDecAssignment_1_1() { return cInterfaceDecAssignment_1_1; }

		//Interface_declaration
		public RuleCall getInterfaceDecInterface_declarationParserRuleCall_1_1_0() { return cInterfaceDecInterface_declarationParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Interface_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Interface_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final RuleCall cINTERFACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInterfaceNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceNameIDTerminalRuleCall_2_0 = (RuleCall)cInterfaceNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cEXTENDSTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceHerdadaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInterfaceHerdadaInterface_nameParserRuleCall_3_1_0 = (RuleCall)cInterfaceHerdadaAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInterfacesHerdadasAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0 = (RuleCall)cInterfacesHerdadasAssignment_3_2_1.eContents().get(0);
		private final RuleCall cR_CURLY_BRACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cFieldsDeclarationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsDeclarationField_declarationParserRuleCall_5_0 = (RuleCall)cFieldsDeclarationAssignment_5.eContents().get(0);
		private final RuleCall cL_CURLY_BRACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Interface_declaration:
		//	modifiers+=Modifier* INTERFACE interfaceName=ID (EXTENDS interfaceHerdada=Interface_name (","
		//	interfacesHerdadas+=Interface_name)*)? R_CURLY_BRACE fieldsDeclaration+=Field_declaration* L_CURLY_BRACE;
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* INTERFACE interfaceName=ID (EXTENDS interfaceHerdada=Interface_name (","
		//interfacesHerdadas+=Interface_name)*)? R_CURLY_BRACE fieldsDeclaration+=Field_declaration* L_CURLY_BRACE
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//INTERFACE
		public RuleCall getINTERFACETerminalRuleCall_1() { return cINTERFACETerminalRuleCall_1; }

		//interfaceName=ID
		public Assignment getInterfaceNameAssignment_2() { return cInterfaceNameAssignment_2; }

		//ID
		public RuleCall getInterfaceNameIDTerminalRuleCall_2_0() { return cInterfaceNameIDTerminalRuleCall_2_0; }

		//(EXTENDS interfaceHerdada=Interface_name ("," interfacesHerdadas+=Interface_name)*)?
		public Group getGroup_3() { return cGroup_3; }

		//EXTENDS
		public RuleCall getEXTENDSTerminalRuleCall_3_0() { return cEXTENDSTerminalRuleCall_3_0; }

		//interfaceHerdada=Interface_name
		public Assignment getInterfaceHerdadaAssignment_3_1() { return cInterfaceHerdadaAssignment_3_1; }

		//Interface_name
		public RuleCall getInterfaceHerdadaInterface_nameParserRuleCall_3_1_0() { return cInterfaceHerdadaInterface_nameParserRuleCall_3_1_0; }

		//("," interfacesHerdadas+=Interface_name)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//interfacesHerdadas+=Interface_name
		public Assignment getInterfacesHerdadasAssignment_3_2_1() { return cInterfacesHerdadasAssignment_3_2_1; }

		//Interface_name
		public RuleCall getInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0() { return cInterfacesHerdadasInterface_nameParserRuleCall_3_2_1_0; }

		//R_CURLY_BRACE
		public RuleCall getR_CURLY_BRACETerminalRuleCall_4() { return cR_CURLY_BRACETerminalRuleCall_4; }

		//fieldsDeclaration+=Field_declaration*
		public Assignment getFieldsDeclarationAssignment_5() { return cFieldsDeclarationAssignment_5; }

		//Field_declaration
		public RuleCall getFieldsDeclarationField_declarationParserRuleCall_5_0() { return cFieldsDeclarationField_declarationParserRuleCall_5_0; }

		//L_CURLY_BRACE
		public RuleCall getL_CURLY_BRACETerminalRuleCall_6() { return cL_CURLY_BRACETerminalRuleCall_6; }
	}

	public class Class_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Class_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cEXTENDSTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cClassHerdadaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassHerdadaClass_nameParserRuleCall_3_1_0 = (RuleCall)cClassHerdadaAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfaceImplementadaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInterfaceImplementadaInterface_nameParserRuleCall_4_1_0 = (RuleCall)cInterfaceImplementadaAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInterfacesImplementadasAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0 = (RuleCall)cInterfacesImplementadasAssignment_4_2_1.eContents().get(0);
		private final RuleCall cR_CURLY_BRACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cFieldsDeclarationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFieldsDeclarationField_declarationParserRuleCall_6_0 = (RuleCall)cFieldsDeclarationAssignment_6.eContents().get(0);
		private final RuleCall cL_CURLY_BRACETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Class_declaration:
		//	modifiers+=Modifier* "class" className=ID (EXTENDS classHerdada=Class_name)? ("implements"
		//	interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? R_CURLY_BRACE
		//	fieldsDeclaration+=Field_declaration* L_CURLY_BRACE;
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "class" className=ID (EXTENDS classHerdada=Class_name)? ("implements"
		//interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? R_CURLY_BRACE
		//fieldsDeclaration+=Field_declaration* L_CURLY_BRACE
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }

		//(EXTENDS classHerdada=Class_name)?
		public Group getGroup_3() { return cGroup_3; }

		//EXTENDS
		public RuleCall getEXTENDSTerminalRuleCall_3_0() { return cEXTENDSTerminalRuleCall_3_0; }

		//classHerdada=Class_name
		public Assignment getClassHerdadaAssignment_3_1() { return cClassHerdadaAssignment_3_1; }

		//Class_name
		public RuleCall getClassHerdadaClass_nameParserRuleCall_3_1_0() { return cClassHerdadaClass_nameParserRuleCall_3_1_0; }

		//("implements" interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//interfaceImplementada=Interface_name
		public Assignment getInterfaceImplementadaAssignment_4_1() { return cInterfaceImplementadaAssignment_4_1; }

		//Interface_name
		public RuleCall getInterfaceImplementadaInterface_nameParserRuleCall_4_1_0() { return cInterfaceImplementadaInterface_nameParserRuleCall_4_1_0; }

		//("," interfacesImplementadas+=Interface_name)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//interfacesImplementadas+=Interface_name
		public Assignment getInterfacesImplementadasAssignment_4_2_1() { return cInterfacesImplementadasAssignment_4_2_1; }

		//Interface_name
		public RuleCall getInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0() { return cInterfacesImplementadasInterface_nameParserRuleCall_4_2_1_0; }

		//R_CURLY_BRACE
		public RuleCall getR_CURLY_BRACETerminalRuleCall_5() { return cR_CURLY_BRACETerminalRuleCall_5; }

		//fieldsDeclaration+=Field_declaration*
		public Assignment getFieldsDeclarationAssignment_6() { return cFieldsDeclarationAssignment_6; }

		//Field_declaration
		public RuleCall getFieldsDeclarationField_declarationParserRuleCall_6_0() { return cFieldsDeclarationField_declarationParserRuleCall_6_0; }

		//L_CURLY_BRACE
		public RuleCall getL_CURLY_BRACETerminalRuleCall_7() { return cL_CURLY_BRACETerminalRuleCall_7; }
	}

	public class Field_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Field_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCommentAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCommentDOC_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0 = (RuleCall)cVariableDeclarationAssignment_0_1_0.eContents().get(0);
		private final Assignment cContructorNameAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cContructorNameConstructor_declarationParserRuleCall_0_1_1_0 = (RuleCall)cContructorNameAssignment_0_1_1.eContents().get(0);
		private final Assignment cMethodNameAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cMethodNameMethod_declarationParserRuleCall_0_1_2_0 = (RuleCall)cMethodNameAssignment_0_1_2.eContents().get(0);
		private final Assignment cStaticinitializerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStaticinitializerStatic_initializerParserRuleCall_1_0 = (RuleCall)cStaticinitializerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cField_declarationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Field_declaration:
		//	comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//	methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";";
		@Override public ParserRule getRule() { return rule; }

		//comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
		//methodName=Method_declaration)
		public Group getGroup_0() { return cGroup_0; }

		//comment=DOC_COMMENT?
		public Assignment getCommentAssignment_0_0() { return cCommentAssignment_0_0; }

		//DOC_COMMENT
		public RuleCall getCommentDOC_COMMENTTerminalRuleCall_0_0_0() { return cCommentDOC_COMMENTTerminalRuleCall_0_0_0; }

		//(variableDeclaration=Variable_declaration | contructorName=Constructor_declaration | methodName=Method_declaration)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//variableDeclaration=Variable_declaration
		public Assignment getVariableDeclarationAssignment_0_1_0() { return cVariableDeclarationAssignment_0_1_0; }

		//Variable_declaration
		public RuleCall getVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0() { return cVariableDeclarationVariable_declarationParserRuleCall_0_1_0_0; }

		//contructorName=Constructor_declaration
		public Assignment getContructorNameAssignment_0_1_1() { return cContructorNameAssignment_0_1_1; }

		//Constructor_declaration
		public RuleCall getContructorNameConstructor_declarationParserRuleCall_0_1_1_0() { return cContructorNameConstructor_declarationParserRuleCall_0_1_1_0; }

		//methodName=Method_declaration
		public Assignment getMethodNameAssignment_0_1_2() { return cMethodNameAssignment_0_1_2; }

		//Method_declaration
		public RuleCall getMethodNameMethod_declarationParserRuleCall_0_1_2_0() { return cMethodNameMethod_declarationParserRuleCall_0_1_2_0; }

		//staticinitializer=Static_initializer
		public Assignment getStaticinitializerAssignment_1() { return cStaticinitializerAssignment_1; }

		//Static_initializer
		public RuleCall getStaticinitializerStatic_initializerParserRuleCall_1_0() { return cStaticinitializerStatic_initializerParserRuleCall_1_0; }

		//{Field_declaration} ";"
		public Group getGroup_2() { return cGroup_2; }

		//{Field_declaration}
		public Action getField_declarationAction_2_0() { return cField_declarationAction_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class Method_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Method_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersMethodModifierParserRuleCall_0_0 = (RuleCall)cModifiersMethodAssignment_0.eContents().get(0);
		private final Assignment cTypeMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMethodTypeParserRuleCall_1_0 = (RuleCall)cTypeMethodAssignment_1.eContents().get(0);
		private final Assignment cNameMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameMethodIDTerminalRuleCall_2_0 = (RuleCall)cNameMethodAssignment_2.eContents().get(0);
		private final Assignment cLParenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLParenLPARENTerminalRuleCall_3_0 = (RuleCall)cLParenAssignment_3.eContents().get(0);
		private final Assignment cParameterListMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterListMethodParameter_listParserRuleCall_4_0 = (RuleCall)cParameterListMethodAssignment_4.eContents().get(0);
		private final Assignment cRparentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRparentRPARENTerminalRuleCall_5_0 = (RuleCall)cRparentAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cStatementMethodAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cStatementMethodStatement_blockParserRuleCall_7_0_0 = (RuleCall)cStatementMethodAssignment_7_0.eContents().get(0);
		private final Assignment cDebugAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final Keyword cDebugSemicolonKeyword_7_1_0 = (Keyword)cDebugAssignment_7_1.eContents().get(0);
		
		//Method_declaration:
		//	modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID
		//	lParen=LPAREN parameterListMethod=Parameter_list? rparent=RPAREN ("[" "]")* (statementMethod=Statement_block |
		//	debug=";");
		@Override public ParserRule getRule() { return rule; }

		//modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID lParen=LPAREN parameterListMethod=Parameter_list?
		//rparent=RPAREN ("[" "]")* (statementMethod=Statement_block | debug=";")
		public Group getGroup() { return cGroup; }

		//modifiersMethod+=Modifier*
		public Assignment getModifiersMethodAssignment_0() { return cModifiersMethodAssignment_0; }

		//Modifier
		public RuleCall getModifiersMethodModifierParserRuleCall_0_0() { return cModifiersMethodModifierParserRuleCall_0_0; }

		//typeMethod=Type
		public Assignment getTypeMethodAssignment_1() { return cTypeMethodAssignment_1; }

		//Type
		public RuleCall getTypeMethodTypeParserRuleCall_1_0() { return cTypeMethodTypeParserRuleCall_1_0; }

		//nameMethod=ID
		public Assignment getNameMethodAssignment_2() { return cNameMethodAssignment_2; }

		//ID
		public RuleCall getNameMethodIDTerminalRuleCall_2_0() { return cNameMethodIDTerminalRuleCall_2_0; }

		//lParen=LPAREN
		public Assignment getLParenAssignment_3() { return cLParenAssignment_3; }

		//LPAREN
		public RuleCall getLParenLPARENTerminalRuleCall_3_0() { return cLParenLPARENTerminalRuleCall_3_0; }

		//parameterListMethod=Parameter_list?
		public Assignment getParameterListMethodAssignment_4() { return cParameterListMethodAssignment_4; }

		//Parameter_list
		public RuleCall getParameterListMethodParameter_listParserRuleCall_4_0() { return cParameterListMethodParameter_listParserRuleCall_4_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_5() { return cRparentAssignment_5; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_5_0() { return cRparentRPARENTerminalRuleCall_5_0; }

		//("[" "]")*
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_1() { return cRightSquareBracketKeyword_6_1; }

		//(statementMethod=Statement_block | debug=";")
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//statementMethod=Statement_block
		public Assignment getStatementMethodAssignment_7_0() { return cStatementMethodAssignment_7_0; }

		//Statement_block
		public RuleCall getStatementMethodStatement_blockParserRuleCall_7_0_0() { return cStatementMethodStatement_blockParserRuleCall_7_0_0; }

		//debug=";"
		public Assignment getDebugAssignment_7_1() { return cDebugAssignment_7_1; }

		//";"
		public Keyword getDebugSemicolonKeyword_7_1_0() { return cDebugSemicolonKeyword_7_1_0; }
	}

	public class Constructor_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Constructor_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersConstructorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersConstructorModifierParserRuleCall_0_0 = (RuleCall)cModifiersConstructorAssignment_0.eContents().get(0);
		private final Assignment cNameConstructorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameConstructorIDTerminalRuleCall_1_0 = (RuleCall)cNameConstructorAssignment_1.eContents().get(0);
		private final Assignment cLParenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLParenLPARENTerminalRuleCall_2_0 = (RuleCall)cLParenAssignment_2.eContents().get(0);
		private final Assignment cParameterListConstructorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListConstructorParameter_listParserRuleCall_3_0 = (RuleCall)cParameterListConstructorAssignment_3.eContents().get(0);
		private final Assignment cRparentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRparentRPARENTerminalRuleCall_4_0 = (RuleCall)cRparentAssignment_4.eContents().get(0);
		private final Assignment cStatementConstructorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementConstructorStatement_blockParserRuleCall_5_0 = (RuleCall)cStatementConstructorAssignment_5.eContents().get(0);
		
		//Constructor_declaration:
		//	modifiersConstructor+=Modifier* nameConstructor=ID
		//	lParen=LPAREN parameterListConstructor=Parameter_list? rparent=RPAREN statementConstructor=Statement_block;
		@Override public ParserRule getRule() { return rule; }

		//modifiersConstructor+=Modifier* nameConstructor=ID lParen=LPAREN parameterListConstructor=Parameter_list? rparent=RPAREN
		//statementConstructor=Statement_block
		public Group getGroup() { return cGroup; }

		//modifiersConstructor+=Modifier*
		public Assignment getModifiersConstructorAssignment_0() { return cModifiersConstructorAssignment_0; }

		//Modifier
		public RuleCall getModifiersConstructorModifierParserRuleCall_0_0() { return cModifiersConstructorModifierParserRuleCall_0_0; }

		//nameConstructor=ID
		public Assignment getNameConstructorAssignment_1() { return cNameConstructorAssignment_1; }

		//ID
		public RuleCall getNameConstructorIDTerminalRuleCall_1_0() { return cNameConstructorIDTerminalRuleCall_1_0; }

		//lParen=LPAREN
		public Assignment getLParenAssignment_2() { return cLParenAssignment_2; }

		//LPAREN
		public RuleCall getLParenLPARENTerminalRuleCall_2_0() { return cLParenLPARENTerminalRuleCall_2_0; }

		//parameterListConstructor=Parameter_list?
		public Assignment getParameterListConstructorAssignment_3() { return cParameterListConstructorAssignment_3; }

		//Parameter_list
		public RuleCall getParameterListConstructorParameter_listParserRuleCall_3_0() { return cParameterListConstructorParameter_listParserRuleCall_3_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_4() { return cRparentAssignment_4; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_4_0() { return cRparentRPARENTerminalRuleCall_4_0; }

		//statementConstructor=Statement_block
		public Assignment getStatementConstructorAssignment_5() { return cStatementConstructorAssignment_5; }

		//Statement_block
		public RuleCall getStatementConstructorStatement_blockParserRuleCall_5_0() { return cStatementConstructorStatement_blockParserRuleCall_5_0; }
	}

	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//Parameter_list:
		//	parameter=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameter=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }

		//parameter=Parameter
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_0_0() { return cParameterParameterParserRuleCall_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cParameterNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterNameIDTerminalRuleCall_1_0 = (RuleCall)cParameterNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Parameter:
		//	type=Type parameterName=ID ("[" "]" | "[]")*;
		@Override public ParserRule getRule() { return rule; }

		//type=Type parameterName=ID ("[" "]" | "[]")*
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//parameterName=ID
		public Assignment getParameterNameAssignment_1() { return cParameterNameAssignment_1; }

		//ID
		public RuleCall getParameterNameIDTerminalRuleCall_1_0() { return cParameterNameIDTerminalRuleCall_1_0; }

		//("[" "]" | "[]")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"[" "]"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_0_1() { return cRightSquareBracketKeyword_2_0_1; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2_1() { return cLeftSquareBracketRightSquareBracketKeyword_2_1; }
	}

	public class Variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersVariableModifierParserRuleCall_0_0 = (RuleCall)cModifiersVariableAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariableVariable_declaratorParserRuleCall_2_0 = (RuleCall)cNameVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNamesVariable_declaratorParserRuleCall_3_1_0 = (RuleCall)cNamesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variable_declaration:
		//	modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";";
		@Override public ParserRule getRule() { return rule; }

		//modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";"
		public Group getGroup() { return cGroup; }

		//modifiersVariable+=Modifier*
		public Assignment getModifiersVariableAssignment_0() { return cModifiersVariableAssignment_0; }

		//Modifier
		public RuleCall getModifiersVariableModifierParserRuleCall_0_0() { return cModifiersVariableModifierParserRuleCall_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//nameVariable=Variable_declarator
		public Assignment getNameVariableAssignment_2() { return cNameVariableAssignment_2; }

		//Variable_declarator
		public RuleCall getNameVariableVariable_declaratorParserRuleCall_2_0() { return cNameVariableVariable_declaratorParserRuleCall_2_0; }

		//("," names+=Variable_declarator)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//names+=Variable_declarator
		public Assignment getNamesAssignment_3_1() { return cNamesAssignment_3_1; }

		//Variable_declarator
		public RuleCall getNamesVariable_declaratorParserRuleCall_3_1_0() { return cNamesVariable_declaratorParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Variable_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable_declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0 = (RuleCall)cNameVariableAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cLenVectorAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cLenVectorLeftSquareBracketKeyword_1_0_0_0 = (Keyword)cLenVectorAssignment_1_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cLenVectorAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cLenVectorLeftSquareBracketRightSquareBracketKeyword_1_1_0 = (Keyword)cLenVectorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariVariable_initializerParserRuleCall_2_1_0 = (RuleCall)cVariAssignment_2_1.eContents().get(0);
		
		//Variable_declarator:
		//	nameVariable=ID (lenVector+="[" "]" | lenVector+="[]")* ("=" vari=Variable_initializer)?;
		@Override public ParserRule getRule() { return rule; }

		//nameVariable=ID (lenVector+="[" "]" | lenVector+="[]")* ("=" vari=Variable_initializer)?
		public Group getGroup() { return cGroup; }

		//nameVariable=ID
		public Assignment getNameVariableAssignment_0() { return cNameVariableAssignment_0; }

		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0() { return cNameVariableIDTerminalRuleCall_0_0; }

		//(lenVector+="[" "]" | lenVector+="[]")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//lenVector+="[" "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//lenVector+="["
		public Assignment getLenVectorAssignment_1_0_0() { return cLenVectorAssignment_1_0_0; }

		//"["
		public Keyword getLenVectorLeftSquareBracketKeyword_1_0_0_0() { return cLenVectorLeftSquareBracketKeyword_1_0_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_1() { return cRightSquareBracketKeyword_1_0_1; }

		//lenVector+="[]"
		public Assignment getLenVectorAssignment_1_1() { return cLenVectorAssignment_1_1; }

		//"[]"
		public Keyword getLenVectorLeftSquareBracketRightSquareBracketKeyword_1_1_0() { return cLenVectorLeftSquareBracketRightSquareBracketKeyword_1_1_0; }

		//("=" vari=Variable_initializer)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//vari=Variable_initializer
		public Assignment getVariAssignment_2_1() { return cVariAssignment_2_1; }

		//Variable_initializer
		public RuleCall getVariVariable_initializerParserRuleCall_2_1_0() { return cVariVariable_initializerParserRuleCall_2_1_0; }
	}

	public class Variable_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable_initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cArray_initAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cArray_initArray_initializerParserRuleCall_0_0 = (RuleCall)cArray_initAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Variable_initializer:
		//	array_init=Array_initializer | expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//array_init=Array_initializer | expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//array_init=Array_initializer
		public Assignment getArray_initAssignment_0() { return cArray_initAssignment_0; }

		//Array_initializer
		public RuleCall getArray_initArray_initializerParserRuleCall_0_0() { return cArray_initArray_initializerParserRuleCall_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class Array_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Array_initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArray_initializerAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cR_CURLY_BRACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableinitializerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableinitializerVariable_initializerParserRuleCall_2_0_0 = (RuleCall)cVariableinitializerAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVariableinitializerAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cVariableinitializerVariable_initializerParserRuleCall_2_1_1_0 = (RuleCall)cVariableinitializerAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cL_CURLY_BRACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Array_initializer:
		//	{Array_initializer} R_CURLY_BRACE (variableinitializer+=Variable_initializer (","
		//	variableinitializer+=Variable_initializer)* ','?)? L_CURLY_BRACE;
		@Override public ParserRule getRule() { return rule; }

		//{Array_initializer} R_CURLY_BRACE (variableinitializer+=Variable_initializer (","
		//variableinitializer+=Variable_initializer)* ','?)? L_CURLY_BRACE
		public Group getGroup() { return cGroup; }

		//{Array_initializer}
		public Action getArray_initializerAction_0() { return cArray_initializerAction_0; }

		//R_CURLY_BRACE
		public RuleCall getR_CURLY_BRACETerminalRuleCall_1() { return cR_CURLY_BRACETerminalRuleCall_1; }

		//(variableinitializer+=Variable_initializer ("," variableinitializer+=Variable_initializer)* ','?)?
		public Group getGroup_2() { return cGroup_2; }

		//variableinitializer+=Variable_initializer
		public Assignment getVariableinitializerAssignment_2_0() { return cVariableinitializerAssignment_2_0; }

		//Variable_initializer
		public RuleCall getVariableinitializerVariable_initializerParserRuleCall_2_0_0() { return cVariableinitializerVariable_initializerParserRuleCall_2_0_0; }

		//("," variableinitializer+=Variable_initializer)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//variableinitializer+=Variable_initializer
		public Assignment getVariableinitializerAssignment_2_1_1() { return cVariableinitializerAssignment_2_1_1; }

		//Variable_initializer
		public RuleCall getVariableinitializerVariable_initializerParserRuleCall_2_1_1_0() { return cVariableinitializerVariable_initializerParserRuleCall_2_1_1_0; }

		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }

		//L_CURLY_BRACE
		public RuleCall getL_CURLY_BRACETerminalRuleCall_3() { return cL_CURLY_BRACETerminalRuleCall_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSpecifierType_specifierParserRuleCall_0_0 = (RuleCall)cTypeSpecifierAssignment_0.eContents().get(0);
		private final Assignment cTypeVectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeVectorLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cTypeVectorAssignment_1.eContents().get(0);
		
		//Type:
		//	typeSpecifier=Type_specifier typeVector+="[]"*;
		@Override public ParserRule getRule() { return rule; }

		//typeSpecifier=Type_specifier typeVector+="[]"*
		public Group getGroup() { return cGroup; }

		//typeSpecifier=Type_specifier
		public Assignment getTypeSpecifierAssignment_0() { return cTypeSpecifierAssignment_0; }

		//Type_specifier
		public RuleCall getTypeSpecifierType_specifierParserRuleCall_0_0() { return cTypeSpecifierType_specifierParserRuleCall_0_0; }

		//typeVector+="[]"*
		public Assignment getTypeVectorAssignment_1() { return cTypeVectorAssignment_1; }

		//"[]"
		public Keyword getTypeVectorLeftSquareBracketRightSquareBracketKeyword_1_0() { return cTypeVectorLeftSquareBracketRightSquareBracketKeyword_1_0; }
	}

	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimitiveTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cPrimitiveTypeAlternatives_0_0 = (Alternatives)cPrimitiveTypeAssignment_0.eContents().get(0);
		private final Keyword cPrimitiveTypeBooleanKeyword_0_0_0 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cPrimitiveTypeByteKeyword_0_0_1 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cPrimitiveTypeCharKeyword_0_0_2 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cPrimitiveTypeShortKeyword_0_0_3 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cPrimitiveTypeIntKeyword_0_0_4 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(4);
		private final Keyword cPrimitiveTypeFloatKeyword_0_0_5 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(5);
		private final Keyword cPrimitiveTypeLongKeyword_0_0_6 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(6);
		private final Keyword cPrimitiveTypeDoubleKeyword_0_0_7 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(7);
		private final Keyword cPrimitiveTypeVoidKeyword_0_0_8 = (Keyword)cPrimitiveTypeAlternatives_0_0.eContents().get(8);
		private final Assignment cClassNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cClassNameClass_nameParserRuleCall_1_0 = (RuleCall)cClassNameAssignment_1.eContents().get(0);
		
		//Type_specifier:
		//	primitiveType=("boolean"
		//	| "byte"
		//	| "char"
		//	| "short"
		//	| "int"
		//	| "float"
		//	| "long"
		//	| "double"
		//	| "void") | className=Class_name;
		@Override public ParserRule getRule() { return rule; }

		//primitiveType=("boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | "void") |
		//className=Class_name
		public Alternatives getAlternatives() { return cAlternatives; }

		//primitiveType=("boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | "void")
		public Assignment getPrimitiveTypeAssignment_0() { return cPrimitiveTypeAssignment_0; }

		//("boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | "void")
		public Alternatives getPrimitiveTypeAlternatives_0_0() { return cPrimitiveTypeAlternatives_0_0; }

		//"boolean"
		public Keyword getPrimitiveTypeBooleanKeyword_0_0_0() { return cPrimitiveTypeBooleanKeyword_0_0_0; }

		//"byte"
		public Keyword getPrimitiveTypeByteKeyword_0_0_1() { return cPrimitiveTypeByteKeyword_0_0_1; }

		//"char"
		public Keyword getPrimitiveTypeCharKeyword_0_0_2() { return cPrimitiveTypeCharKeyword_0_0_2; }

		//"short"
		public Keyword getPrimitiveTypeShortKeyword_0_0_3() { return cPrimitiveTypeShortKeyword_0_0_3; }

		//"int"
		public Keyword getPrimitiveTypeIntKeyword_0_0_4() { return cPrimitiveTypeIntKeyword_0_0_4; }

		//"float"
		public Keyword getPrimitiveTypeFloatKeyword_0_0_5() { return cPrimitiveTypeFloatKeyword_0_0_5; }

		//"long"
		public Keyword getPrimitiveTypeLongKeyword_0_0_6() { return cPrimitiveTypeLongKeyword_0_0_6; }

		//"double"
		public Keyword getPrimitiveTypeDoubleKeyword_0_0_7() { return cPrimitiveTypeDoubleKeyword_0_0_7; }

		//"void"
		public Keyword getPrimitiveTypeVoidKeyword_0_0_8() { return cPrimitiveTypeVoidKeyword_0_0_8; }

		//className=Class_name
		public Assignment getClassNameAssignment_1() { return cClassNameAssignment_1; }

		//Class_name
		public RuleCall getClassNameClass_nameParserRuleCall_1_0() { return cClassNameClass_nameParserRuleCall_1_0; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMODTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTATICTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Modifier:
		//	MOD | STATIC;
		@Override public ParserRule getRule() { return rule; }

		//MOD | STATIC
		public Alternatives getAlternatives() { return cAlternatives; }

		//MOD
		public RuleCall getMODTerminalRuleCall_0() { return cMODTerminalRuleCall_0; }

		//STATIC
		public RuleCall getSTATICTerminalRuleCall_1() { return cSTATICTerminalRuleCall_1; }
	}

	public class Static_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Static_initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStaticSTATICTerminalRuleCall_0_0 = (RuleCall)cStaticAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStatement_blockParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Static_initializer:
		//	static=STATIC name=Statement_block;
		@Override public ParserRule getRule() { return rule; }

		//static=STATIC name=Statement_block
		public Group getGroup() { return cGroup; }

		//static=STATIC
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//STATIC
		public RuleCall getStaticSTATICTerminalRuleCall_0_0() { return cStaticSTATICTerminalRuleCall_0_0; }

		//name=Statement_block
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Statement_block
		public RuleCall getNameStatement_blockParserRuleCall_1_0() { return cNameStatement_blockParserRuleCall_1_0; }
	}

	public class Statement_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatement_blockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRCurlyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRCurlyR_CURLY_BRACETerminalRuleCall_1_0 = (RuleCall)cRCurlyAssignment_1.eContents().get(0);
		private final Assignment cStatmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatmentsStatementParserRuleCall_2_0 = (RuleCall)cStatmentsAssignment_2.eContents().get(0);
		private final Assignment cLCurlyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLCurlyL_CURLY_BRACETerminalRuleCall_3_0 = (RuleCall)cLCurlyAssignment_3.eContents().get(0);
		
		//Statement_block:
		//	{Statement_block} rCurly=R_CURLY_BRACE statments+=Statement* lCurly=L_CURLY_BRACE;
		@Override public ParserRule getRule() { return rule; }

		//{Statement_block} rCurly=R_CURLY_BRACE statments+=Statement* lCurly=L_CURLY_BRACE
		public Group getGroup() { return cGroup; }

		//{Statement_block}
		public Action getStatement_blockAction_0() { return cStatement_blockAction_0; }

		//rCurly=R_CURLY_BRACE
		public Assignment getRCurlyAssignment_1() { return cRCurlyAssignment_1; }

		//R_CURLY_BRACE
		public RuleCall getRCurlyR_CURLY_BRACETerminalRuleCall_1_0() { return cRCurlyR_CURLY_BRACETerminalRuleCall_1_0; }

		//statments+=Statement*
		public Assignment getStatmentsAssignment_2() { return cStatmentsAssignment_2; }

		//Statement
		public RuleCall getStatmentsStatementParserRuleCall_2_0() { return cStatmentsStatementParserRuleCall_2_0; }

		//lCurly=L_CURLY_BRACE
		public Assignment getLCurlyAssignment_3() { return cLCurlyAssignment_3; }

		//L_CURLY_BRACE
		public RuleCall getLCurlyL_CURLY_BRACETerminalRuleCall_3_0() { return cLCurlyL_CURLY_BRACETerminalRuleCall_3_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationVariable_declarationParserRuleCall_0_0 = (RuleCall)cVariableDeclarationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionStatementExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionStatementAssignment_1_0.eContents().get(0);
		private final Assignment cGAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cGSemicolonKeyword_1_1_0 = (Keyword)cGAssignment_1_1.eContents().get(0);
		private final Assignment cIfStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIfStatementIf_statementParserRuleCall_2_0 = (RuleCall)cIfStatementAssignment_2.eContents().get(0);
		private final Assignment cDoStatementAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDoStatementDo_StatementParserRuleCall_3_0 = (RuleCall)cDoStatementAssignment_3.eContents().get(0);
		private final Assignment cWhileStatementAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cWhileStatementWhile_StatementParserRuleCall_4_0 = (RuleCall)cWhileStatementAssignment_4.eContents().get(0);
		private final Assignment cForStatementAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cForStatementFor_StatementParserRuleCall_5_0 = (RuleCall)cForStatementAssignment_5.eContents().get(0);
		private final Assignment cSwitchStatementAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cSwitchStatementSwitch_statementParserRuleCall_6_0 = (RuleCall)cSwitchStatementAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cSynchronizedKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cRparentAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cRparentRPARENTerminalRuleCall_7_2_0 = (RuleCall)cRparentAssignment_7_2.eContents().get(0);
		private final Assignment cSyncStatementAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cSyncStatementStatementParserRuleCall_7_3_0 = (RuleCall)cSyncStatementAssignment_7_3.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cStatementAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cRetAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Keyword cRetReturnKeyword_8_1_0 = (Keyword)cRetAssignment_8_1.eContents().get(0);
		private final Assignment cExpressionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_8_2_0 = (RuleCall)cExpressionAssignment_8_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cStatementAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cThrowKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExpressionAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_9_2_0 = (RuleCall)cExpressionAssignment_9_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cStatementBlockAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cStatementBlockStatement_blockParserRuleCall_10_0 = (RuleCall)cStatementBlockAssignment_10.eContents().get(0);
		private final Assignment cTryStatementAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cTryStatementTry_statementParserRuleCall_11_0 = (RuleCall)cTryStatementAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cNameStatementAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final RuleCall cNameStatementIDTerminalRuleCall_12_0_0 = (RuleCall)cNameStatementAssignment_12_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final Assignment cStatementAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_12_2_0 = (RuleCall)cStatementAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cStatementAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cBreakKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cNameAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_13_2_0 = (RuleCall)cNameAssignment_13_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cStatementAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cContinueKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cNameAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_14_2_0 = (RuleCall)cNameAssignment_14_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cStatementAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		
		////FIXME: resolver Expression em todas operações 
		//Statement:
		//	variableDeclaration=Variable_declaration | expressionStatement+=Expression g=";" | ifStatement=If_statement |
		//	doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement |
		//	switchStatement=Switch_statement |
		//	"synchronized(" expression=Expression rparent=RPAREN syncStatement=Statement | {Statement} ret="return"
		//	expression=Expression? ";" | {Statement} "throw" expression=Expression? ";" | statementBlock=Statement_block |
		//	tryStatement=Try_statement | nameStatement=ID COLON statement=Statement | {Statement} "break" name=ID? ";" |
		//	{Statement} "continue" name=ID? ";" | {Statement} ";";
		@Override public ParserRule getRule() { return rule; }

		//variableDeclaration=Variable_declaration | expressionStatement+=Expression g=";" | ifStatement=If_statement |
		//doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement |
		//switchStatement=Switch_statement | "synchronized(" expression=Expression rparent=RPAREN syncStatement=Statement |
		//{Statement} ret="return" expression=Expression? ";" | {Statement} "throw" expression=Expression? ";" |
		//statementBlock=Statement_block | tryStatement=Try_statement | nameStatement=ID COLON statement=Statement | {Statement}
		//"break" name=ID? ";" | {Statement} "continue" name=ID? ";" | {Statement} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//variableDeclaration=Variable_declaration
		public Assignment getVariableDeclarationAssignment_0() { return cVariableDeclarationAssignment_0; }

		//Variable_declaration
		public RuleCall getVariableDeclarationVariable_declarationParserRuleCall_0_0() { return cVariableDeclarationVariable_declarationParserRuleCall_0_0; }

		//expressionStatement+=Expression g=";"
		public Group getGroup_1() { return cGroup_1; }

		//expressionStatement+=Expression
		public Assignment getExpressionStatementAssignment_1_0() { return cExpressionStatementAssignment_1_0; }

		//Expression
		public RuleCall getExpressionStatementExpressionParserRuleCall_1_0_0() { return cExpressionStatementExpressionParserRuleCall_1_0_0; }

		//g=";"
		public Assignment getGAssignment_1_1() { return cGAssignment_1_1; }

		//";"
		public Keyword getGSemicolonKeyword_1_1_0() { return cGSemicolonKeyword_1_1_0; }

		//ifStatement=If_statement
		public Assignment getIfStatementAssignment_2() { return cIfStatementAssignment_2; }

		//If_statement
		public RuleCall getIfStatementIf_statementParserRuleCall_2_0() { return cIfStatementIf_statementParserRuleCall_2_0; }

		//doStatement=Do_Statement
		public Assignment getDoStatementAssignment_3() { return cDoStatementAssignment_3; }

		//Do_Statement
		public RuleCall getDoStatementDo_StatementParserRuleCall_3_0() { return cDoStatementDo_StatementParserRuleCall_3_0; }

		//whileStatement=While_Statement
		public Assignment getWhileStatementAssignment_4() { return cWhileStatementAssignment_4; }

		//While_Statement
		public RuleCall getWhileStatementWhile_StatementParserRuleCall_4_0() { return cWhileStatementWhile_StatementParserRuleCall_4_0; }

		//forStatement=For_Statement
		public Assignment getForStatementAssignment_5() { return cForStatementAssignment_5; }

		//For_Statement
		public RuleCall getForStatementFor_StatementParserRuleCall_5_0() { return cForStatementFor_StatementParserRuleCall_5_0; }

		//switchStatement=Switch_statement
		public Assignment getSwitchStatementAssignment_6() { return cSwitchStatementAssignment_6; }

		//Switch_statement
		public RuleCall getSwitchStatementSwitch_statementParserRuleCall_6_0() { return cSwitchStatementSwitch_statementParserRuleCall_6_0; }

		//"synchronized(" expression=Expression rparent=RPAREN syncStatement=Statement
		public Group getGroup_7() { return cGroup_7; }

		//"synchronized("
		public Keyword getSynchronizedKeyword_7_0() { return cSynchronizedKeyword_7_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_7_1_0() { return cExpressionExpressionParserRuleCall_7_1_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_7_2() { return cRparentAssignment_7_2; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_7_2_0() { return cRparentRPARENTerminalRuleCall_7_2_0; }

		//syncStatement=Statement
		public Assignment getSyncStatementAssignment_7_3() { return cSyncStatementAssignment_7_3; }

		//Statement
		public RuleCall getSyncStatementStatementParserRuleCall_7_3_0() { return cSyncStatementStatementParserRuleCall_7_3_0; }

		//{Statement} ret="return" expression=Expression? ";"
		public Group getGroup_8() { return cGroup_8; }

		//{Statement}
		public Action getStatementAction_8_0() { return cStatementAction_8_0; }

		//ret="return"
		public Assignment getRetAssignment_8_1() { return cRetAssignment_8_1; }

		//"return"
		public Keyword getRetReturnKeyword_8_1_0() { return cRetReturnKeyword_8_1_0; }

		//expression=Expression?
		public Assignment getExpressionAssignment_8_2() { return cExpressionAssignment_8_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_2_0() { return cExpressionExpressionParserRuleCall_8_2_0; }

		//";"
		public Keyword getSemicolonKeyword_8_3() { return cSemicolonKeyword_8_3; }

		//{Statement} "throw" expression=Expression? ";"
		public Group getGroup_9() { return cGroup_9; }

		//{Statement}
		public Action getStatementAction_9_0() { return cStatementAction_9_0; }

		//"throw"
		public Keyword getThrowKeyword_9_1() { return cThrowKeyword_9_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_9_2() { return cExpressionAssignment_9_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_9_2_0() { return cExpressionExpressionParserRuleCall_9_2_0; }

		//";"
		public Keyword getSemicolonKeyword_9_3() { return cSemicolonKeyword_9_3; }

		//statementBlock=Statement_block
		public Assignment getStatementBlockAssignment_10() { return cStatementBlockAssignment_10; }

		//Statement_block
		public RuleCall getStatementBlockStatement_blockParserRuleCall_10_0() { return cStatementBlockStatement_blockParserRuleCall_10_0; }

		//tryStatement=Try_statement
		public Assignment getTryStatementAssignment_11() { return cTryStatementAssignment_11; }

		//Try_statement
		public RuleCall getTryStatementTry_statementParserRuleCall_11_0() { return cTryStatementTry_statementParserRuleCall_11_0; }

		//nameStatement=ID COLON statement=Statement
		public Group getGroup_12() { return cGroup_12; }

		//nameStatement=ID
		public Assignment getNameStatementAssignment_12_0() { return cNameStatementAssignment_12_0; }

		//ID
		public RuleCall getNameStatementIDTerminalRuleCall_12_0_0() { return cNameStatementIDTerminalRuleCall_12_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_12_1() { return cCOLONTerminalRuleCall_12_1; }

		//statement=Statement
		public Assignment getStatementAssignment_12_2() { return cStatementAssignment_12_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_12_2_0() { return cStatementStatementParserRuleCall_12_2_0; }

		//{Statement} "break" name=ID? ";"
		public Group getGroup_13() { return cGroup_13; }

		//{Statement}
		public Action getStatementAction_13_0() { return cStatementAction_13_0; }

		//"break"
		public Keyword getBreakKeyword_13_1() { return cBreakKeyword_13_1; }

		//name=ID?
		public Assignment getNameAssignment_13_2() { return cNameAssignment_13_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_13_2_0() { return cNameIDTerminalRuleCall_13_2_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3() { return cSemicolonKeyword_13_3; }

		//{Statement} "continue" name=ID? ";"
		public Group getGroup_14() { return cGroup_14; }

		//{Statement}
		public Action getStatementAction_14_0() { return cStatementAction_14_0; }

		//"continue"
		public Keyword getContinueKeyword_14_1() { return cContinueKeyword_14_1; }

		//name=ID?
		public Assignment getNameAssignment_14_2() { return cNameAssignment_14_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_14_2_0() { return cNameIDTerminalRuleCall_14_2_0; }

		//";"
		public Keyword getSemicolonKeyword_14_3() { return cSemicolonKeyword_14_3; }

		//{Statement} ";"
		public Group getGroup_15() { return cGroup_15; }

		//{Statement}
		public Action getStatementAction_15_0() { return cStatementAction_15_0; }

		//";"
		public Keyword getSemicolonKeyword_15_1() { return cSemicolonKeyword_15_1; }
	}

	public class For_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.For_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVariableVariable_declarationParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cExpressionAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0_0 = (RuleCall)cExpressionAssignment_2_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cExpression2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpression2ExpressionParserRuleCall_3_0 = (RuleCall)cExpression2Assignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpression3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpression3ExpressionParserRuleCall_5_0 = (RuleCall)cExpression3Assignment_5.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cStatementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementStatementParserRuleCall_7_0 = (RuleCall)cStatementAssignment_7.eContents().get(0);
		
		////##################################  For
		//For_Statement:
		//	"for" LPAREN (variable=Variable_declaration | ";" | expression=Expression ";") expression2=Expression? ";"
		//	expression3=Expression?
		//	RPAREN statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"for" LPAREN (variable=Variable_declaration | ";" | expression=Expression ";") expression2=Expression? ";"
		//expression3=Expression? RPAREN statement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//(variable=Variable_declaration | ";" | expression=Expression ";")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//variable=Variable_declaration
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }

		//Variable_declaration
		public RuleCall getVariableVariable_declarationParserRuleCall_2_0_0() { return cVariableVariable_declarationParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//expression=Expression ";"
		public Group getGroup_2_2() { return cGroup_2_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_2_0() { return cExpressionAssignment_2_2_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0_0() { return cExpressionExpressionParserRuleCall_2_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_2_1() { return cSemicolonKeyword_2_2_1; }

		//expression2=Expression?
		public Assignment getExpression2Assignment_3() { return cExpression2Assignment_3; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_3_0() { return cExpression2ExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//expression3=Expression?
		public Assignment getExpression3Assignment_5() { return cExpression3Assignment_5; }

		//Expression
		public RuleCall getExpression3ExpressionParserRuleCall_5_0() { return cExpression3ExpressionParserRuleCall_5_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_6() { return cRPARENTerminalRuleCall_6; }

		//statement=Statement
		public Assignment getStatementAssignment_7() { return cStatementAssignment_7; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_7_0() { return cStatementStatementParserRuleCall_7_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNumericExpression3Assignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNumericExpression3Numeric_Expression_NRParserRuleCall_0_0_0_0 = (RuleCall)cNumericExpression3Assignment_0_0_0.eContents().get(0);
		private final Assignment cAuxAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_0_1_0 = (RuleCall)cAuxAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLogicalExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalExpressionLogical_Expression_NRParserRuleCall_1_0_0 = (RuleCall)cLogicalExpressionAssignment_1_0.eContents().get(0);
		private final Assignment cAuxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_1_1_0 = (RuleCall)cAuxAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBitExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBitExpressionBit_Expression_NRParserRuleCall_2_0_0 = (RuleCall)cBitExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cAuxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_2_1_0 = (RuleCall)cAuxAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cCastExpressionAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cCastExpressionCast_ExpressionParserRuleCall_3_0_0_0 = (RuleCall)cCastExpressionAssignment_3_0_0.eContents().get(0);
		private final Assignment cAuxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_3_1_0 = (RuleCall)cAuxAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cCreatingExpressionAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cCreatingExpressionCreating_ExpressionParserRuleCall_4_0_0_0 = (RuleCall)cCreatingExpressionAssignment_4_0_0.eContents().get(0);
		private final Assignment cAuxAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_4_1_0 = (RuleCall)cAuxAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cLiteralExpressionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLiteralExpressionLiteral_ExpressionParserRuleCall_5_0_0 = (RuleCall)cLiteralExpressionAssignment_5_0.eContents().get(0);
		private final Assignment cAuxAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_5_1_0 = (RuleCall)cAuxAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cNullAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cNullNULLTerminalRuleCall_6_0_0 = (RuleCall)cNullAssignment_6_0.eContents().get(0);
		private final Assignment cAuxAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_6_1_0 = (RuleCall)cAuxAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cSuperAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cSuperSUPERTerminalRuleCall_7_0_0 = (RuleCall)cSuperAssignment_7_0.eContents().get(0);
		private final Assignment cAuxAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_7_1_0 = (RuleCall)cAuxAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cThisAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cThisTHISTerminalRuleCall_8_0_0 = (RuleCall)cThisAssignment_8_0.eContents().get(0);
		private final Assignment cAuxAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_8_1_0 = (RuleCall)cAuxAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cNameAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_9_0_0 = (RuleCall)cNameAssignment_9_0.eContents().get(0);
		private final Assignment cAuxAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_9_1_0 = (RuleCall)cAuxAssignment_9_1.eContents().get(0);
		
		////################################## EXPRESSOES
		//Expression:
		//	=> (numericExpression3=Numeric_Expression_NR) aux=Expression_aux
		//	| logicalExpression=Logical_Expression_NR aux=Expression_aux
		//	| bitExpression=Bit_Expression_NR aux=Expression_aux
		//	| => (castExpression=Cast_Expression) aux=Expression_aux
		//	| => (creatingExpression=Creating_Expression) aux=Expression_aux
		//	| literalExpression=Literal_Expression aux=Expression_aux
		//	| null=NULL aux=Expression_aux
		//	| super=SUPER aux=Expression_aux
		//	| this=THIS aux=Expression_aux
		//	| name=ID aux=Expression_aux;
		@Override public ParserRule getRule() { return rule; }

		//=> (numericExpression3=Numeric_Expression_NR) aux=Expression_aux | logicalExpression=Logical_Expression_NR
		//aux=Expression_aux | bitExpression=Bit_Expression_NR aux=Expression_aux | => (castExpression=Cast_Expression)
		//aux=Expression_aux | => (creatingExpression=Creating_Expression) aux=Expression_aux |
		//literalExpression=Literal_Expression aux=Expression_aux | null=NULL aux=Expression_aux | super=SUPER
		//aux=Expression_aux | this=THIS aux=Expression_aux | name=ID aux=Expression_aux
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (numericExpression3=Numeric_Expression_NR) aux=Expression_aux
		public Group getGroup_0() { return cGroup_0; }

		//=> (numericExpression3=Numeric_Expression_NR)
		public Group getGroup_0_0() { return cGroup_0_0; }

		//numericExpression3=Numeric_Expression_NR
		public Assignment getNumericExpression3Assignment_0_0_0() { return cNumericExpression3Assignment_0_0_0; }

		//Numeric_Expression_NR
		public RuleCall getNumericExpression3Numeric_Expression_NRParserRuleCall_0_0_0_0() { return cNumericExpression3Numeric_Expression_NRParserRuleCall_0_0_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_0_1() { return cAuxAssignment_0_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_0_1_0() { return cAuxExpression_auxParserRuleCall_0_1_0; }

		//logicalExpression=Logical_Expression_NR aux=Expression_aux
		public Group getGroup_1() { return cGroup_1; }

		//logicalExpression=Logical_Expression_NR
		public Assignment getLogicalExpressionAssignment_1_0() { return cLogicalExpressionAssignment_1_0; }

		//Logical_Expression_NR
		public RuleCall getLogicalExpressionLogical_Expression_NRParserRuleCall_1_0_0() { return cLogicalExpressionLogical_Expression_NRParserRuleCall_1_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_1_1() { return cAuxAssignment_1_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_1_1_0() { return cAuxExpression_auxParserRuleCall_1_1_0; }

		//bitExpression=Bit_Expression_NR aux=Expression_aux
		public Group getGroup_2() { return cGroup_2; }

		//bitExpression=Bit_Expression_NR
		public Assignment getBitExpressionAssignment_2_0() { return cBitExpressionAssignment_2_0; }

		//Bit_Expression_NR
		public RuleCall getBitExpressionBit_Expression_NRParserRuleCall_2_0_0() { return cBitExpressionBit_Expression_NRParserRuleCall_2_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_2_1() { return cAuxAssignment_2_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_2_1_0() { return cAuxExpression_auxParserRuleCall_2_1_0; }

		//=> (castExpression=Cast_Expression) aux=Expression_aux
		public Group getGroup_3() { return cGroup_3; }

		//=> (castExpression=Cast_Expression)
		public Group getGroup_3_0() { return cGroup_3_0; }

		//castExpression=Cast_Expression
		public Assignment getCastExpressionAssignment_3_0_0() { return cCastExpressionAssignment_3_0_0; }

		//Cast_Expression
		public RuleCall getCastExpressionCast_ExpressionParserRuleCall_3_0_0_0() { return cCastExpressionCast_ExpressionParserRuleCall_3_0_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_3_1() { return cAuxAssignment_3_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_3_1_0() { return cAuxExpression_auxParserRuleCall_3_1_0; }

		//=> (creatingExpression=Creating_Expression) aux=Expression_aux
		public Group getGroup_4() { return cGroup_4; }

		//=> (creatingExpression=Creating_Expression)
		public Group getGroup_4_0() { return cGroup_4_0; }

		//creatingExpression=Creating_Expression
		public Assignment getCreatingExpressionAssignment_4_0_0() { return cCreatingExpressionAssignment_4_0_0; }

		//Creating_Expression
		public RuleCall getCreatingExpressionCreating_ExpressionParserRuleCall_4_0_0_0() { return cCreatingExpressionCreating_ExpressionParserRuleCall_4_0_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_4_1() { return cAuxAssignment_4_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_4_1_0() { return cAuxExpression_auxParserRuleCall_4_1_0; }

		//literalExpression=Literal_Expression aux=Expression_aux
		public Group getGroup_5() { return cGroup_5; }

		//literalExpression=Literal_Expression
		public Assignment getLiteralExpressionAssignment_5_0() { return cLiteralExpressionAssignment_5_0; }

		//Literal_Expression
		public RuleCall getLiteralExpressionLiteral_ExpressionParserRuleCall_5_0_0() { return cLiteralExpressionLiteral_ExpressionParserRuleCall_5_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_5_1() { return cAuxAssignment_5_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_5_1_0() { return cAuxExpression_auxParserRuleCall_5_1_0; }

		//null=NULL aux=Expression_aux
		public Group getGroup_6() { return cGroup_6; }

		//null=NULL
		public Assignment getNullAssignment_6_0() { return cNullAssignment_6_0; }

		//NULL
		public RuleCall getNullNULLTerminalRuleCall_6_0_0() { return cNullNULLTerminalRuleCall_6_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_6_1() { return cAuxAssignment_6_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_6_1_0() { return cAuxExpression_auxParserRuleCall_6_1_0; }

		//super=SUPER aux=Expression_aux
		public Group getGroup_7() { return cGroup_7; }

		//super=SUPER
		public Assignment getSuperAssignment_7_0() { return cSuperAssignment_7_0; }

		//SUPER
		public RuleCall getSuperSUPERTerminalRuleCall_7_0_0() { return cSuperSUPERTerminalRuleCall_7_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_7_1() { return cAuxAssignment_7_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_7_1_0() { return cAuxExpression_auxParserRuleCall_7_1_0; }

		//this=THIS aux=Expression_aux
		public Group getGroup_8() { return cGroup_8; }

		//this=THIS
		public Assignment getThisAssignment_8_0() { return cThisAssignment_8_0; }

		//THIS
		public RuleCall getThisTHISTerminalRuleCall_8_0_0() { return cThisTHISTerminalRuleCall_8_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_8_1() { return cAuxAssignment_8_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_8_1_0() { return cAuxExpression_auxParserRuleCall_8_1_0; }

		//name=ID aux=Expression_aux
		public Group getGroup_9() { return cGroup_9; }

		//name=ID
		public Assignment getNameAssignment_9_0() { return cNameAssignment_9_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_9_0_0() { return cNameIDTerminalRuleCall_9_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_9_1() { return cAuxAssignment_9_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_9_1_0() { return cAuxExpression_auxParserRuleCall_9_1_0; }
	}

	public class Expression_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression_aux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Assignment cArgListAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cArgListArg_ListParserRuleCall_0_0_1_0 = (RuleCall)cArgListAssignment_0_0_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Assignment cAuxAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_0_1_0 = (RuleCall)cAuxAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpression2Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpression2Assignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cAuxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_1_1_0 = (RuleCall)cAuxAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExpression2Assignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_2_0_1_0 = (RuleCall)cExpression2Assignment_2_0_1.eContents().get(0);
		private final Assignment cAuxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_2_1_0 = (RuleCall)cAuxAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cExpressionCommaAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cExpressionCommaExpressionParserRuleCall_3_0_1_0 = (RuleCall)cExpressionCommaAssignment_3_0_1.eContents().get(0);
		private final Assignment cAuxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_3_1_0 = (RuleCall)cAuxAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final RuleCall cINSTANCEOFTerminalRuleCall_4_0_0 = (RuleCall)cGroup_4_0.eContents().get(0);
		private final Assignment cNameAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cNameClass_nameParserRuleCall_4_0_1_0 = (RuleCall)cNameAssignment_4_0_1.eContents().get(0);
		private final Assignment cAuxAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_4_1_0 = (RuleCall)cAuxAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cSginAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Alternatives cSginAlternatives_5_0_0 = (Alternatives)cSginAssignment_5_0.eContents().get(0);
		private final RuleCall cSginINCREMENTTerminalRuleCall_5_0_0_0 = (RuleCall)cSginAlternatives_5_0_0.eContents().get(0);
		private final RuleCall cSginDECREMENTTerminalRuleCall_5_0_0_1 = (RuleCall)cSginAlternatives_5_0_0.eContents().get(1);
		private final Assignment cAuxAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_5_1_0 = (RuleCall)cAuxAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cNumericSignAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Alternatives cNumericSignAlternatives_6_0_0 = (Alternatives)cNumericSignAssignment_6_0.eContents().get(0);
		private final Keyword cNumericSignPlusSignKeyword_6_0_0_0 = (Keyword)cNumericSignAlternatives_6_0_0.eContents().get(0);
		private final RuleCall cNumericSignPLUS_EQUALTerminalRuleCall_6_0_0_1 = (RuleCall)cNumericSignAlternatives_6_0_0.eContents().get(1);
		private final Keyword cNumericSignHyphenMinusKeyword_6_0_0_2 = (Keyword)cNumericSignAlternatives_6_0_0.eContents().get(2);
		private final RuleCall cNumericSignMINUS_EQUALTerminalRuleCall_6_0_0_3 = (RuleCall)cNumericSignAlternatives_6_0_0.eContents().get(3);
		private final RuleCall cNumericSignMULTIPLYTerminalRuleCall_6_0_0_4 = (RuleCall)cNumericSignAlternatives_6_0_0.eContents().get(4);
		private final RuleCall cNumericSignMULTIPLY_EQUALTerminalRuleCall_6_0_0_5 = (RuleCall)cNumericSignAlternatives_6_0_0.eContents().get(5);
		private final RuleCall cNumericSignDIVIDETerminalRuleCall_6_0_0_6 = (RuleCall)cNumericSignAlternatives_6_0_0.eContents().get(6);
		private final RuleCall cNumericSignDIVIDE_EQUALTerminalRuleCall_6_0_0_7 = (RuleCall)cNumericSignAlternatives_6_0_0.eContents().get(7);
		private final RuleCall cNumericSignMODULETerminalRuleCall_6_0_0_8 = (RuleCall)cNumericSignAlternatives_6_0_0.eContents().get(8);
		private final RuleCall cNumericSignMODULE_EQUALTerminalRuleCall_6_0_0_9 = (RuleCall)cNumericSignAlternatives_6_0_0.eContents().get(9);
		private final Assignment cExp2Assignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExp2ExpressionParserRuleCall_6_1_0 = (RuleCall)cExp2Assignment_6_1.eContents().get(0);
		private final Assignment cAuxAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAuxExpression_auxParserRuleCall_6_2_0 = (RuleCall)cAuxAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cTestingSignAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Alternatives cTestingSignAlternatives_7_0_0 = (Alternatives)cTestingSignAssignment_7_0.eContents().get(0);
		private final RuleCall cTestingSignBTTerminalRuleCall_7_0_0_0 = (RuleCall)cTestingSignAlternatives_7_0_0.eContents().get(0);
		private final RuleCall cTestingSignSTTerminalRuleCall_7_0_0_1 = (RuleCall)cTestingSignAlternatives_7_0_0.eContents().get(1);
		private final RuleCall cTestingSignBETerminalRuleCall_7_0_0_2 = (RuleCall)cTestingSignAlternatives_7_0_0.eContents().get(2);
		private final RuleCall cTestingSignSETerminalRuleCall_7_0_0_3 = (RuleCall)cTestingSignAlternatives_7_0_0.eContents().get(3);
		private final RuleCall cTestingSignDOUBLE_EQUALTerminalRuleCall_7_0_0_4 = (RuleCall)cTestingSignAlternatives_7_0_0.eContents().get(4);
		private final RuleCall cTestingSignDIFFERENTTerminalRuleCall_7_0_0_5 = (RuleCall)cTestingSignAlternatives_7_0_0.eContents().get(5);
		private final Assignment cExp1Assignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExp1ExpressionParserRuleCall_7_1_0 = (RuleCall)cExp1Assignment_7_1.eContents().get(0);
		private final Assignment cAuxAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAuxExpression_auxParserRuleCall_7_2_0 = (RuleCall)cAuxAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Alternatives cAlternatives_8_0 = (Alternatives)cGroup_8.eContents().get(0);
		private final Assignment cLogicalSignAssignment_8_0_0 = (Assignment)cAlternatives_8_0.eContents().get(0);
		private final Alternatives cLogicalSignAlternatives_8_0_0_0 = (Alternatives)cLogicalSignAssignment_8_0_0.eContents().get(0);
		private final RuleCall cLogicalSignORTerminalRuleCall_8_0_0_0_0 = (RuleCall)cLogicalSignAlternatives_8_0_0_0.eContents().get(0);
		private final RuleCall cLogicalSignOR_EQUALTerminalRuleCall_8_0_0_0_1 = (RuleCall)cLogicalSignAlternatives_8_0_0_0.eContents().get(1);
		private final RuleCall cLogicalSignEXPTerminalRuleCall_8_0_0_0_2 = (RuleCall)cLogicalSignAlternatives_8_0_0_0.eContents().get(2);
		private final RuleCall cLogicalSignEXP_EQUALTerminalRuleCall_8_0_0_0_3 = (RuleCall)cLogicalSignAlternatives_8_0_0_0.eContents().get(3);
		private final RuleCall cLogicalSignDOUBLE_OR_EQUALTerminalRuleCall_8_0_0_0_4 = (RuleCall)cLogicalSignAlternatives_8_0_0_0.eContents().get(4);
		private final RuleCall cLogicalSignMODULETerminalRuleCall_8_0_0_0_5 = (RuleCall)cLogicalSignAlternatives_8_0_0_0.eContents().get(5);
		private final RuleCall cLogicalSignMODULE_EQUALTerminalRuleCall_8_0_0_0_6 = (RuleCall)cLogicalSignAlternatives_8_0_0_0.eContents().get(6);
		private final Assignment cAmpersandAssignment_8_0_1 = (Assignment)cAlternatives_8_0.eContents().get(1);
		private final RuleCall cAmpersandAmpersand_RuleParserRuleCall_8_0_1_0 = (RuleCall)cAmpersandAssignment_8_0_1.eContents().get(0);
		private final Assignment cExp1Assignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cExp1ExpressionParserRuleCall_8_1_0 = (RuleCall)cExp1Assignment_8_1.eContents().get(0);
		private final Assignment cAuxAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cAuxExpression_auxParserRuleCall_8_2_0 = (RuleCall)cAuxAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cWATTerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Assignment cExp1Assignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cExp1ExpressionParserRuleCall_9_1_0 = (RuleCall)cExp1Assignment_9_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		private final Assignment cExp2Assignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cExp2ExpressionParserRuleCall_9_3_0 = (RuleCall)cExp2Assignment_9_3.eContents().get(0);
		private final Assignment cAuxAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cAuxExpression_auxParserRuleCall_9_4_0 = (RuleCall)cAuxAssignment_9_4.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cStringSignAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Alternatives cStringSignAlternatives_10_0_0 = (Alternatives)cStringSignAssignment_10_0.eContents().get(0);
		private final Keyword cStringSignPlusSignKeyword_10_0_0_0 = (Keyword)cStringSignAlternatives_10_0_0.eContents().get(0);
		private final RuleCall cStringSignPLUS_EQUALTerminalRuleCall_10_0_0_1 = (RuleCall)cStringSignAlternatives_10_0_0.eContents().get(1);
		private final Assignment cExp1Assignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cExp1ExpressionParserRuleCall_10_1_0 = (RuleCall)cExp1Assignment_10_1.eContents().get(0);
		private final Assignment cAuxAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cAuxExpression_auxParserRuleCall_10_2_0 = (RuleCall)cAuxAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cBitSignAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Alternatives cBitSignAlternatives_11_0_0 = (Alternatives)cBitSignAssignment_11_0.eContents().get(0);
		private final RuleCall cBitSignR_SHIFT_EQUALTerminalRuleCall_11_0_0_0 = (RuleCall)cBitSignAlternatives_11_0_0.eContents().get(0);
		private final RuleCall cBitSignL_SHIFTTerminalRuleCall_11_0_0_1 = (RuleCall)cBitSignAlternatives_11_0_0.eContents().get(1);
		private final RuleCall cBitSignR_SHIFTTerminalRuleCall_11_0_0_2 = (RuleCall)cBitSignAlternatives_11_0_0.eContents().get(2);
		private final RuleCall cBitSignSUPER_SHIFTTerminalRuleCall_11_0_0_3 = (RuleCall)cBitSignAlternatives_11_0_0.eContents().get(3);
		private final Assignment cExpressionBitAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cExpressionBitExpressionParserRuleCall_11_1_0 = (RuleCall)cExpressionBitAssignment_11_1.eContents().get(0);
		private final Assignment cAuxAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cAuxExpression_auxParserRuleCall_11_2_0 = (RuleCall)cAuxAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cLogicOpAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Alternatives cLogicOpAlternatives_12_0_0 = (Alternatives)cLogicOpAssignment_12_0.eContents().get(0);
		private final RuleCall cLogicOpOR_LOGICTerminalRuleCall_12_0_0_0 = (RuleCall)cLogicOpAlternatives_12_0_0.eContents().get(0);
		private final RuleCall cLogicOpANDTerminalRuleCall_12_0_0_1 = (RuleCall)cLogicOpAlternatives_12_0_0.eContents().get(1);
		private final Assignment cLogicExpAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cLogicExpExpressionParserRuleCall_12_1_0 = (RuleCall)cLogicExpAssignment_12_1.eContents().get(0);
		private final Action cExpression_auxAction_13 = (Action)cAlternatives.eContents().get(13);
		
		//Expression_aux:
		//	(LPAREN argList=Arg_List? RPAREN) aux=Expression_aux
		//	| ("[" expression2=Expression "]") aux=Expression_aux
		//	| ('.' expression2=Expression) aux=Expression_aux
		//	| ("," expressionComma=Expression) aux=Expression_aux
		//	| (INSTANCEOF name=Class_name) aux=Expression_aux
		//	| sgin=(INCREMENT | DECREMENT) aux=Expression_aux | numericSign=("+" | PLUS_EQUAL | "-" | MINUS_EQUAL | MULTIPLY |
		//	MULTIPLY_EQUAL | DIVIDE | DIVIDE_EQUAL | MODULE | MODULE_EQUAL) exp2=Expression aux=Expression_aux | testingSign=(BT
		//	| ST | BE | SE | DOUBLE_EQUAL | DIFFERENT) exp1=Expression aux=Expression_aux | (logicalSign=(OR | OR_EQUAL | EXP |
		//	EXP_EQUAL | DOUBLE_OR_EQUAL | MODULE | MODULE_EQUAL) | ampersand=Ampersand_Rule) exp1=Expression aux=Expression_aux |
		//	WAT exp1=Expression COLON exp2=Expression aux=Expression_aux | stringSign=("+" | PLUS_EQUAL) exp1=Expression
		//	aux=Expression_aux | bitSign=(R_SHIFT_EQUAL | L_SHIFT | R_SHIFT | SUPER_SHIFT) expressionBit=Expression
		//	aux=Expression_aux | logicOp=(OR_LOGIC | AND) logicExp=Expression
		//	| {Expression_aux};
		@Override public ParserRule getRule() { return rule; }

		//(LPAREN argList=Arg_List? RPAREN) aux=Expression_aux | ("[" expression2=Expression "]") aux=Expression_aux | ('.'
		//expression2=Expression) aux=Expression_aux | ("," expressionComma=Expression) aux=Expression_aux | (INSTANCEOF
		//name=Class_name) aux=Expression_aux | sgin=(INCREMENT | DECREMENT) aux=Expression_aux | numericSign=("+" | PLUS_EQUAL
		//| "-" | MINUS_EQUAL | MULTIPLY | MULTIPLY_EQUAL | DIVIDE | DIVIDE_EQUAL | MODULE | MODULE_EQUAL) exp2=Expression
		//aux=Expression_aux | testingSign=(BT | ST | BE | SE | DOUBLE_EQUAL | DIFFERENT) exp1=Expression aux=Expression_aux |
		//(logicalSign=(OR | OR_EQUAL | EXP | EXP_EQUAL | DOUBLE_OR_EQUAL | MODULE | MODULE_EQUAL) | ampersand=Ampersand_Rule)
		//exp1=Expression aux=Expression_aux | WAT exp1=Expression COLON exp2=Expression aux=Expression_aux | stringSign=("+" |
		//PLUS_EQUAL) exp1=Expression aux=Expression_aux | bitSign=(R_SHIFT_EQUAL | L_SHIFT | R_SHIFT | SUPER_SHIFT)
		//expressionBit=Expression aux=Expression_aux | logicOp=(OR_LOGIC | AND) logicExp=Expression | {Expression_aux}
		public Alternatives getAlternatives() { return cAlternatives; }

		//(LPAREN argList=Arg_List? RPAREN) aux=Expression_aux
		public Group getGroup_0() { return cGroup_0; }

		//(LPAREN argList=Arg_List? RPAREN)
		public Group getGroup_0_0() { return cGroup_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_0_0() { return cLPARENTerminalRuleCall_0_0_0; }

		//argList=Arg_List?
		public Assignment getArgListAssignment_0_0_1() { return cArgListAssignment_0_0_1; }

		//Arg_List
		public RuleCall getArgListArg_ListParserRuleCall_0_0_1_0() { return cArgListArg_ListParserRuleCall_0_0_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_0_2() { return cRPARENTerminalRuleCall_0_0_2; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_0_1() { return cAuxAssignment_0_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_0_1_0() { return cAuxExpression_auxParserRuleCall_0_1_0; }

		//("[" expression2=Expression "]") aux=Expression_aux
		public Group getGroup_1() { return cGroup_1; }

		//("[" expression2=Expression "]")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//expression2=Expression
		public Assignment getExpression2Assignment_1_0_1() { return cExpression2Assignment_1_0_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_0_1_0() { return cExpression2ExpressionParserRuleCall_1_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_1_1() { return cAuxAssignment_1_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_1_1_0() { return cAuxExpression_auxParserRuleCall_1_1_0; }

		//('.' expression2=Expression) aux=Expression_aux
		public Group getGroup_2() { return cGroup_2; }

		//('.' expression2=Expression)
		public Group getGroup_2_0() { return cGroup_2_0; }

		//'.'
		public Keyword getFullStopKeyword_2_0_0() { return cFullStopKeyword_2_0_0; }

		//expression2=Expression
		public Assignment getExpression2Assignment_2_0_1() { return cExpression2Assignment_2_0_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_2_0_1_0() { return cExpression2ExpressionParserRuleCall_2_0_1_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_2_1() { return cAuxAssignment_2_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_2_1_0() { return cAuxExpression_auxParserRuleCall_2_1_0; }

		//("," expressionComma=Expression) aux=Expression_aux
		public Group getGroup_3() { return cGroup_3; }

		//("," expressionComma=Expression)
		public Group getGroup_3_0() { return cGroup_3_0; }

		//","
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }

		//expressionComma=Expression
		public Assignment getExpressionCommaAssignment_3_0_1() { return cExpressionCommaAssignment_3_0_1; }

		//Expression
		public RuleCall getExpressionCommaExpressionParserRuleCall_3_0_1_0() { return cExpressionCommaExpressionParserRuleCall_3_0_1_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_3_1() { return cAuxAssignment_3_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_3_1_0() { return cAuxExpression_auxParserRuleCall_3_1_0; }

		//(INSTANCEOF name=Class_name) aux=Expression_aux
		public Group getGroup_4() { return cGroup_4; }

		//(INSTANCEOF name=Class_name)
		public Group getGroup_4_0() { return cGroup_4_0; }

		//INSTANCEOF
		public RuleCall getINSTANCEOFTerminalRuleCall_4_0_0() { return cINSTANCEOFTerminalRuleCall_4_0_0; }

		//name=Class_name
		public Assignment getNameAssignment_4_0_1() { return cNameAssignment_4_0_1; }

		//Class_name
		public RuleCall getNameClass_nameParserRuleCall_4_0_1_0() { return cNameClass_nameParserRuleCall_4_0_1_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_4_1() { return cAuxAssignment_4_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_4_1_0() { return cAuxExpression_auxParserRuleCall_4_1_0; }

		//sgin=(INCREMENT | DECREMENT) aux=Expression_aux
		public Group getGroup_5() { return cGroup_5; }

		//sgin=(INCREMENT | DECREMENT)
		public Assignment getSginAssignment_5_0() { return cSginAssignment_5_0; }

		//(INCREMENT | DECREMENT)
		public Alternatives getSginAlternatives_5_0_0() { return cSginAlternatives_5_0_0; }

		//INCREMENT
		public RuleCall getSginINCREMENTTerminalRuleCall_5_0_0_0() { return cSginINCREMENTTerminalRuleCall_5_0_0_0; }

		//DECREMENT
		public RuleCall getSginDECREMENTTerminalRuleCall_5_0_0_1() { return cSginDECREMENTTerminalRuleCall_5_0_0_1; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_5_1() { return cAuxAssignment_5_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_5_1_0() { return cAuxExpression_auxParserRuleCall_5_1_0; }

		//numericSign=("+" | PLUS_EQUAL | "-" | MINUS_EQUAL | MULTIPLY | MULTIPLY_EQUAL | DIVIDE | DIVIDE_EQUAL | MODULE |
		//MODULE_EQUAL) exp2=Expression aux=Expression_aux
		public Group getGroup_6() { return cGroup_6; }

		//numericSign=("+" | PLUS_EQUAL | "-" | MINUS_EQUAL | MULTIPLY | MULTIPLY_EQUAL | DIVIDE | DIVIDE_EQUAL | MODULE |
		//MODULE_EQUAL)
		public Assignment getNumericSignAssignment_6_0() { return cNumericSignAssignment_6_0; }

		//("+" | PLUS_EQUAL | "-" | MINUS_EQUAL | MULTIPLY | MULTIPLY_EQUAL | DIVIDE | DIVIDE_EQUAL | MODULE | MODULE_EQUAL)
		public Alternatives getNumericSignAlternatives_6_0_0() { return cNumericSignAlternatives_6_0_0; }

		//"+"
		public Keyword getNumericSignPlusSignKeyword_6_0_0_0() { return cNumericSignPlusSignKeyword_6_0_0_0; }

		//PLUS_EQUAL
		public RuleCall getNumericSignPLUS_EQUALTerminalRuleCall_6_0_0_1() { return cNumericSignPLUS_EQUALTerminalRuleCall_6_0_0_1; }

		//"-"
		public Keyword getNumericSignHyphenMinusKeyword_6_0_0_2() { return cNumericSignHyphenMinusKeyword_6_0_0_2; }

		//MINUS_EQUAL
		public RuleCall getNumericSignMINUS_EQUALTerminalRuleCall_6_0_0_3() { return cNumericSignMINUS_EQUALTerminalRuleCall_6_0_0_3; }

		//MULTIPLY
		public RuleCall getNumericSignMULTIPLYTerminalRuleCall_6_0_0_4() { return cNumericSignMULTIPLYTerminalRuleCall_6_0_0_4; }

		//MULTIPLY_EQUAL
		public RuleCall getNumericSignMULTIPLY_EQUALTerminalRuleCall_6_0_0_5() { return cNumericSignMULTIPLY_EQUALTerminalRuleCall_6_0_0_5; }

		//DIVIDE
		public RuleCall getNumericSignDIVIDETerminalRuleCall_6_0_0_6() { return cNumericSignDIVIDETerminalRuleCall_6_0_0_6; }

		//DIVIDE_EQUAL
		public RuleCall getNumericSignDIVIDE_EQUALTerminalRuleCall_6_0_0_7() { return cNumericSignDIVIDE_EQUALTerminalRuleCall_6_0_0_7; }

		//MODULE
		public RuleCall getNumericSignMODULETerminalRuleCall_6_0_0_8() { return cNumericSignMODULETerminalRuleCall_6_0_0_8; }

		//MODULE_EQUAL
		public RuleCall getNumericSignMODULE_EQUALTerminalRuleCall_6_0_0_9() { return cNumericSignMODULE_EQUALTerminalRuleCall_6_0_0_9; }

		//exp2=Expression
		public Assignment getExp2Assignment_6_1() { return cExp2Assignment_6_1; }

		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_6_1_0() { return cExp2ExpressionParserRuleCall_6_1_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_6_2() { return cAuxAssignment_6_2; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_6_2_0() { return cAuxExpression_auxParserRuleCall_6_2_0; }

		//testingSign=(BT | ST | BE | SE | DOUBLE_EQUAL | DIFFERENT) exp1=Expression aux=Expression_aux
		public Group getGroup_7() { return cGroup_7; }

		//testingSign=(BT | ST | BE | SE | DOUBLE_EQUAL | DIFFERENT)
		public Assignment getTestingSignAssignment_7_0() { return cTestingSignAssignment_7_0; }

		//(BT | ST | BE | SE | DOUBLE_EQUAL | DIFFERENT)
		public Alternatives getTestingSignAlternatives_7_0_0() { return cTestingSignAlternatives_7_0_0; }

		//BT
		public RuleCall getTestingSignBTTerminalRuleCall_7_0_0_0() { return cTestingSignBTTerminalRuleCall_7_0_0_0; }

		//ST
		public RuleCall getTestingSignSTTerminalRuleCall_7_0_0_1() { return cTestingSignSTTerminalRuleCall_7_0_0_1; }

		//BE
		public RuleCall getTestingSignBETerminalRuleCall_7_0_0_2() { return cTestingSignBETerminalRuleCall_7_0_0_2; }

		//SE
		public RuleCall getTestingSignSETerminalRuleCall_7_0_0_3() { return cTestingSignSETerminalRuleCall_7_0_0_3; }

		//DOUBLE_EQUAL
		public RuleCall getTestingSignDOUBLE_EQUALTerminalRuleCall_7_0_0_4() { return cTestingSignDOUBLE_EQUALTerminalRuleCall_7_0_0_4; }

		//DIFFERENT
		public RuleCall getTestingSignDIFFERENTTerminalRuleCall_7_0_0_5() { return cTestingSignDIFFERENTTerminalRuleCall_7_0_0_5; }

		//exp1=Expression
		public Assignment getExp1Assignment_7_1() { return cExp1Assignment_7_1; }

		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_7_1_0() { return cExp1ExpressionParserRuleCall_7_1_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_7_2() { return cAuxAssignment_7_2; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_7_2_0() { return cAuxExpression_auxParserRuleCall_7_2_0; }

		//(logicalSign=(OR | OR_EQUAL | EXP | EXP_EQUAL | DOUBLE_OR_EQUAL | MODULE | MODULE_EQUAL) | ampersand=Ampersand_Rule)
		//exp1=Expression aux=Expression_aux
		public Group getGroup_8() { return cGroup_8; }

		//(logicalSign=(OR | OR_EQUAL | EXP | EXP_EQUAL | DOUBLE_OR_EQUAL | MODULE | MODULE_EQUAL) | ampersand=Ampersand_Rule)
		public Alternatives getAlternatives_8_0() { return cAlternatives_8_0; }

		//logicalSign=(OR | OR_EQUAL | EXP | EXP_EQUAL | DOUBLE_OR_EQUAL | MODULE | MODULE_EQUAL)
		public Assignment getLogicalSignAssignment_8_0_0() { return cLogicalSignAssignment_8_0_0; }

		//(OR | OR_EQUAL | EXP | EXP_EQUAL | DOUBLE_OR_EQUAL | MODULE | MODULE_EQUAL)
		public Alternatives getLogicalSignAlternatives_8_0_0_0() { return cLogicalSignAlternatives_8_0_0_0; }

		//OR
		public RuleCall getLogicalSignORTerminalRuleCall_8_0_0_0_0() { return cLogicalSignORTerminalRuleCall_8_0_0_0_0; }

		//OR_EQUAL
		public RuleCall getLogicalSignOR_EQUALTerminalRuleCall_8_0_0_0_1() { return cLogicalSignOR_EQUALTerminalRuleCall_8_0_0_0_1; }

		//EXP
		public RuleCall getLogicalSignEXPTerminalRuleCall_8_0_0_0_2() { return cLogicalSignEXPTerminalRuleCall_8_0_0_0_2; }

		//EXP_EQUAL
		public RuleCall getLogicalSignEXP_EQUALTerminalRuleCall_8_0_0_0_3() { return cLogicalSignEXP_EQUALTerminalRuleCall_8_0_0_0_3; }

		//DOUBLE_OR_EQUAL
		public RuleCall getLogicalSignDOUBLE_OR_EQUALTerminalRuleCall_8_0_0_0_4() { return cLogicalSignDOUBLE_OR_EQUALTerminalRuleCall_8_0_0_0_4; }

		//MODULE
		public RuleCall getLogicalSignMODULETerminalRuleCall_8_0_0_0_5() { return cLogicalSignMODULETerminalRuleCall_8_0_0_0_5; }

		//MODULE_EQUAL
		public RuleCall getLogicalSignMODULE_EQUALTerminalRuleCall_8_0_0_0_6() { return cLogicalSignMODULE_EQUALTerminalRuleCall_8_0_0_0_6; }

		//ampersand=Ampersand_Rule
		public Assignment getAmpersandAssignment_8_0_1() { return cAmpersandAssignment_8_0_1; }

		//Ampersand_Rule
		public RuleCall getAmpersandAmpersand_RuleParserRuleCall_8_0_1_0() { return cAmpersandAmpersand_RuleParserRuleCall_8_0_1_0; }

		//exp1=Expression
		public Assignment getExp1Assignment_8_1() { return cExp1Assignment_8_1; }

		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_8_1_0() { return cExp1ExpressionParserRuleCall_8_1_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_8_2() { return cAuxAssignment_8_2; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_8_2_0() { return cAuxExpression_auxParserRuleCall_8_2_0; }

		//WAT exp1=Expression COLON exp2=Expression aux=Expression_aux
		public Group getGroup_9() { return cGroup_9; }

		//WAT
		public RuleCall getWATTerminalRuleCall_9_0() { return cWATTerminalRuleCall_9_0; }

		//exp1=Expression
		public Assignment getExp1Assignment_9_1() { return cExp1Assignment_9_1; }

		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_9_1_0() { return cExp1ExpressionParserRuleCall_9_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_9_2() { return cCOLONTerminalRuleCall_9_2; }

		//exp2=Expression
		public Assignment getExp2Assignment_9_3() { return cExp2Assignment_9_3; }

		//Expression
		public RuleCall getExp2ExpressionParserRuleCall_9_3_0() { return cExp2ExpressionParserRuleCall_9_3_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_9_4() { return cAuxAssignment_9_4; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_9_4_0() { return cAuxExpression_auxParserRuleCall_9_4_0; }

		//stringSign=("+" | PLUS_EQUAL) exp1=Expression aux=Expression_aux
		public Group getGroup_10() { return cGroup_10; }

		//stringSign=("+" | PLUS_EQUAL)
		public Assignment getStringSignAssignment_10_0() { return cStringSignAssignment_10_0; }

		//("+" | PLUS_EQUAL)
		public Alternatives getStringSignAlternatives_10_0_0() { return cStringSignAlternatives_10_0_0; }

		//"+"
		public Keyword getStringSignPlusSignKeyword_10_0_0_0() { return cStringSignPlusSignKeyword_10_0_0_0; }

		//PLUS_EQUAL
		public RuleCall getStringSignPLUS_EQUALTerminalRuleCall_10_0_0_1() { return cStringSignPLUS_EQUALTerminalRuleCall_10_0_0_1; }

		//exp1=Expression
		public Assignment getExp1Assignment_10_1() { return cExp1Assignment_10_1; }

		//Expression
		public RuleCall getExp1ExpressionParserRuleCall_10_1_0() { return cExp1ExpressionParserRuleCall_10_1_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_10_2() { return cAuxAssignment_10_2; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_10_2_0() { return cAuxExpression_auxParserRuleCall_10_2_0; }

		//bitSign=(R_SHIFT_EQUAL | L_SHIFT | R_SHIFT | SUPER_SHIFT) expressionBit=Expression aux=Expression_aux
		public Group getGroup_11() { return cGroup_11; }

		//bitSign=(R_SHIFT_EQUAL | L_SHIFT | R_SHIFT | SUPER_SHIFT)
		public Assignment getBitSignAssignment_11_0() { return cBitSignAssignment_11_0; }

		//(R_SHIFT_EQUAL | L_SHIFT | R_SHIFT | SUPER_SHIFT)
		public Alternatives getBitSignAlternatives_11_0_0() { return cBitSignAlternatives_11_0_0; }

		//R_SHIFT_EQUAL
		public RuleCall getBitSignR_SHIFT_EQUALTerminalRuleCall_11_0_0_0() { return cBitSignR_SHIFT_EQUALTerminalRuleCall_11_0_0_0; }

		//L_SHIFT
		public RuleCall getBitSignL_SHIFTTerminalRuleCall_11_0_0_1() { return cBitSignL_SHIFTTerminalRuleCall_11_0_0_1; }

		//R_SHIFT
		public RuleCall getBitSignR_SHIFTTerminalRuleCall_11_0_0_2() { return cBitSignR_SHIFTTerminalRuleCall_11_0_0_2; }

		//SUPER_SHIFT
		public RuleCall getBitSignSUPER_SHIFTTerminalRuleCall_11_0_0_3() { return cBitSignSUPER_SHIFTTerminalRuleCall_11_0_0_3; }

		//expressionBit=Expression
		public Assignment getExpressionBitAssignment_11_1() { return cExpressionBitAssignment_11_1; }

		//Expression
		public RuleCall getExpressionBitExpressionParserRuleCall_11_1_0() { return cExpressionBitExpressionParserRuleCall_11_1_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_11_2() { return cAuxAssignment_11_2; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_11_2_0() { return cAuxExpression_auxParserRuleCall_11_2_0; }

		//logicOp=(OR_LOGIC | AND) logicExp=Expression
		public Group getGroup_12() { return cGroup_12; }

		//logicOp=(OR_LOGIC | AND)
		public Assignment getLogicOpAssignment_12_0() { return cLogicOpAssignment_12_0; }

		//(OR_LOGIC | AND)
		public Alternatives getLogicOpAlternatives_12_0_0() { return cLogicOpAlternatives_12_0_0; }

		//OR_LOGIC
		public RuleCall getLogicOpOR_LOGICTerminalRuleCall_12_0_0_0() { return cLogicOpOR_LOGICTerminalRuleCall_12_0_0_0; }

		//AND
		public RuleCall getLogicOpANDTerminalRuleCall_12_0_0_1() { return cLogicOpANDTerminalRuleCall_12_0_0_1; }

		//logicExp=Expression
		public Assignment getLogicExpAssignment_12_1() { return cLogicExpAssignment_12_1; }

		//Expression
		public RuleCall getLogicExpExpressionParserRuleCall_12_1_0() { return cLogicExpExpressionParserRuleCall_12_1_0; }

		//{Expression_aux}
		public Action getExpression_auxAction_13() { return cExpression_auxAction_13; }
	}

	public class Ampersand_RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Ampersand_Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cA1AMPERSANDTerminalRuleCall_0_0 = (RuleCall)cA1Assignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cA2Assignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cA2AMPERSANDTerminalRuleCall_1_0_0 = (RuleCall)cA2Assignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Ampersand_Rule:
		//	a1=AMPERSAND (a2=AMPERSAND | "=")?;
		@Override public ParserRule getRule() { return rule; }

		//a1=AMPERSAND (a2=AMPERSAND | "=")?
		public Group getGroup() { return cGroup; }

		//a1=AMPERSAND
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//AMPERSAND
		public RuleCall getA1AMPERSANDTerminalRuleCall_0_0() { return cA1AMPERSANDTerminalRuleCall_0_0; }

		//(a2=AMPERSAND | "=")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//a2=AMPERSAND
		public Assignment getA2Assignment_1_0() { return cA2Assignment_1_0; }

		//AMPERSAND
		public RuleCall getA2AMPERSANDTerminalRuleCall_1_0_0() { return cA2AMPERSANDTerminalRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
	}

	public class Float_LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Float_Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecimalDigits1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDecimalDigits1DECIMAL_DIGITSTerminalRuleCall_0_0 = (RuleCall)cDecimalDigits1Assignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDecimalDigits2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecimalDigits2DECIMAL_DIGITSTerminalRuleCall_2_0 = (RuleCall)cDecimalDigits2Assignment_2.eContents().get(0);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpEXPOENT_PARTParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Assignment cFloatTypeSufixAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFloatTypeSufixFLOAT_TYPE_SUFIXTerminalRuleCall_4_0 = (RuleCall)cFloatTypeSufixAssignment_4.eContents().get(0);
		
		//Float_Literal:
		//	decimalDigits1=DECIMAL_DIGITS '.' decimalDigits2=DECIMAL_DIGITS? exp=EXPOENT_PART? / *(expoentPart=Expoent_part)?* /
		//	floatTypeSufix=FLOAT_TYPE_SUFIX?;
		@Override public ParserRule getRule() { return rule; }

		//decimalDigits1=DECIMAL_DIGITS '.' decimalDigits2=DECIMAL_DIGITS? exp=EXPOENT_PART? / *(expoentPart=Expoent_part)?* /
		//floatTypeSufix=FLOAT_TYPE_SUFIX?
		public Group getGroup() { return cGroup; }

		//decimalDigits1=DECIMAL_DIGITS
		public Assignment getDecimalDigits1Assignment_0() { return cDecimalDigits1Assignment_0; }

		//DECIMAL_DIGITS
		public RuleCall getDecimalDigits1DECIMAL_DIGITSTerminalRuleCall_0_0() { return cDecimalDigits1DECIMAL_DIGITSTerminalRuleCall_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//decimalDigits2=DECIMAL_DIGITS?
		public Assignment getDecimalDigits2Assignment_2() { return cDecimalDigits2Assignment_2; }

		//DECIMAL_DIGITS
		public RuleCall getDecimalDigits2DECIMAL_DIGITSTerminalRuleCall_2_0() { return cDecimalDigits2DECIMAL_DIGITSTerminalRuleCall_2_0; }

		//exp=EXPOENT_PART?
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//EXPOENT_PART
		public RuleCall getExpEXPOENT_PARTParserRuleCall_3_0() { return cExpEXPOENT_PARTParserRuleCall_3_0; }

		/// *(expoentPart=Expoent_part)?* / floatTypeSufix=FLOAT_TYPE_SUFIX?
		public Assignment getFloatTypeSufixAssignment_4() { return cFloatTypeSufixAssignment_4; }

		//FLOAT_TYPE_SUFIX
		public RuleCall getFloatTypeSufixFLOAT_TYPE_SUFIXTerminalRuleCall_4_0() { return cFloatTypeSufixFLOAT_TYPE_SUFIXTerminalRuleCall_4_0; }
	}

	public class Literal_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Literal_Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExpAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpHEXATerminalRuleCall_0_0_0_0 = (RuleCall)cExpAssignment_0_0_0.eContents().get(0);
		private final RuleCall cLONGTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cExp1Assignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cExp1DECIMAL_DIGITSTerminalRuleCall_0_1_0_0 = (RuleCall)cExp1Assignment_0_1_0.eContents().get(0);
		private final RuleCall cLONGTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cExp2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExp2Float_LiteralParserRuleCall_1_0 = (RuleCall)cExp2Assignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cCharLitAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCharLitCHARTerminalRuleCall_3_0 = (RuleCall)cCharLitAssignment_3.eContents().get(0);
		
		//Literal_Expression:
		//	(exp=HEXA LONG? | exp1=DECIMAL_DIGITS LONG?) | exp2=Float_Literal
		//	| string=STRING | charLit=CHAR;
		@Override public ParserRule getRule() { return rule; }

		//(exp=HEXA LONG? | exp1=DECIMAL_DIGITS LONG?) | exp2=Float_Literal | string=STRING | charLit=CHAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//(exp=HEXA LONG? | exp1=DECIMAL_DIGITS LONG?)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//exp=HEXA LONG?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//exp=HEXA
		public Assignment getExpAssignment_0_0_0() { return cExpAssignment_0_0_0; }

		//HEXA
		public RuleCall getExpHEXATerminalRuleCall_0_0_0_0() { return cExpHEXATerminalRuleCall_0_0_0_0; }

		//LONG?
		public RuleCall getLONGTerminalRuleCall_0_0_1() { return cLONGTerminalRuleCall_0_0_1; }

		//exp1=DECIMAL_DIGITS LONG?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//exp1=DECIMAL_DIGITS
		public Assignment getExp1Assignment_0_1_0() { return cExp1Assignment_0_1_0; }

		//DECIMAL_DIGITS
		public RuleCall getExp1DECIMAL_DIGITSTerminalRuleCall_0_1_0_0() { return cExp1DECIMAL_DIGITSTerminalRuleCall_0_1_0_0; }

		//LONG?
		public RuleCall getLONGTerminalRuleCall_0_1_1() { return cLONGTerminalRuleCall_0_1_1; }

		//exp2=Float_Literal
		public Assignment getExp2Assignment_1() { return cExp2Assignment_1; }

		//Float_Literal
		public RuleCall getExp2Float_LiteralParserRuleCall_1_0() { return cExp2Float_LiteralParserRuleCall_1_0; }

		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }

		//charLit=CHAR
		public Assignment getCharLitAssignment_3() { return cCharLitAssignment_3; }

		//CHAR
		public RuleCall getCharLitCHARTerminalRuleCall_3_0() { return cCharLitCHARTerminalRuleCall_3_0; }
	}

	public class Creating_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Creating_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cClassNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cClassNameClass_nameParserRuleCall_1_0_0_0 = (RuleCall)cClassNameAssignment_1_0_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cArgListAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cArgListArg_ListParserRuleCall_1_0_2_0 = (RuleCall)cArgListAssignment_1_0_2.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cTypeSpecifierType_specifierParserRuleCall_1_1_0_0 = (RuleCall)cTypeSpecifierAssignment_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_0_0 = (Keyword)cGroup_1_1_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1_0_1 = (Assignment)cGroup_1_1_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_0_1_0 = (RuleCall)cExpressionAssignment_1_1_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_0_2 = (Keyword)cGroup_1_1_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_1_2_0 = (Group)cAlternatives_1_1_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0_0 = (Keyword)cGroup_1_1_2_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_0_1 = (Keyword)cGroup_1_1_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1_2_1 = (Keyword)cAlternatives_1_1_2.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cLPARENTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExpressionAssignment_1_2_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		
		//Creating_Expression:
		//	NEW (className=Class_name LPAREN argList=Arg_List RPAREN | typeSpecifier=Type_specifier ("[" expression=Expression
		//	"]" | "[]")? ("[" "]" | "[]")* | LPAREN expression=Expression RPAREN);
		@Override public ParserRule getRule() { return rule; }

		//NEW (className=Class_name LPAREN argList=Arg_List RPAREN | typeSpecifier=Type_specifier ("[" expression=Expression "]" |
		//"[]")? ("[" "]" | "[]")* | LPAREN expression=Expression RPAREN)
		public Group getGroup() { return cGroup; }

		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }

		//(className=Class_name LPAREN argList=Arg_List RPAREN | typeSpecifier=Type_specifier ("[" expression=Expression "]" |
		//"[]")? ("[" "]" | "[]")* | LPAREN expression=Expression RPAREN)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//className=Class_name LPAREN argList=Arg_List RPAREN
		public Group getGroup_1_0() { return cGroup_1_0; }

		//className=Class_name
		public Assignment getClassNameAssignment_1_0_0() { return cClassNameAssignment_1_0_0; }

		//Class_name
		public RuleCall getClassNameClass_nameParserRuleCall_1_0_0_0() { return cClassNameClass_nameParserRuleCall_1_0_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_1() { return cLPARENTerminalRuleCall_1_0_1; }

		//argList=Arg_List
		public Assignment getArgListAssignment_1_0_2() { return cArgListAssignment_1_0_2; }

		//Arg_List
		public RuleCall getArgListArg_ListParserRuleCall_1_0_2_0() { return cArgListArg_ListParserRuleCall_1_0_2_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_3() { return cRPARENTerminalRuleCall_1_0_3; }

		//typeSpecifier=Type_specifier ("[" expression=Expression "]" | "[]")? ("[" "]" | "[]")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//typeSpecifier=Type_specifier
		public Assignment getTypeSpecifierAssignment_1_1_0() { return cTypeSpecifierAssignment_1_1_0; }

		//Type_specifier
		public RuleCall getTypeSpecifierType_specifierParserRuleCall_1_1_0_0() { return cTypeSpecifierType_specifierParserRuleCall_1_1_0_0; }

		//("[" expression=Expression "]" | "[]")?
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//"[" expression=Expression "]"
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1_0_0() { return cLeftSquareBracketKeyword_1_1_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1_1_0_1() { return cExpressionAssignment_1_1_1_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1_0_2() { return cRightSquareBracketKeyword_1_1_1_0_2; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1_1_1; }

		//("[" "]" | "[]")*
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }

		//"[" "]"
		public Group getGroup_1_1_2_0() { return cGroup_1_1_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0_0() { return cLeftSquareBracketKeyword_1_1_2_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_0_1() { return cRightSquareBracketKeyword_1_1_2_0_1; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1_2_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1_2_1; }

		//LPAREN expression=Expression RPAREN
		public Group getGroup_1_2() { return cGroup_1_2; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_2_0() { return cLPARENTerminalRuleCall_1_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2_1() { return cExpressionAssignment_1_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_2_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_2_2() { return cRPARENTerminalRuleCall_1_2_2; }
	}

	public class Cast_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Cast_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Cast_Expression:
		//	LPAREN type=Type RPAREN expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//LPAREN type=Type RPAREN expression=Expression
		public Group getGroup() { return cGroup; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0() { return cLPARENTerminalRuleCall_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2() { return cRPARENTerminalRuleCall_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class Bit_Expression_NRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Bit_Expression_NR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNOTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Bit_Expression_NR:
		//	NOT expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//NOT expression=Expression
		public Group getGroup() { return cGroup; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0() { return cNOTTerminalRuleCall_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class Logical_Expression_NRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Logical_Expression_NR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExclamationAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExclamationEXCLAMATIONTerminalRuleCall_0_0_0 = (RuleCall)cExclamationAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0_0 = (RuleCall)cExpressionAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_0_1_1_0 = (RuleCall)cGroup_0_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_1_1_0 = (RuleCall)cExpressionAssignment_0_1_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_0_1_1_2 = (RuleCall)cGroup_0_1_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cTrueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTrueTRUETerminalRuleCall_2_0 = (RuleCall)cTrueAssignment_2.eContents().get(0);
		private final Assignment cFalseAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFalseFALSETerminalRuleCall_3_0 = (RuleCall)cFalseAssignment_3.eContents().get(0);
		
		//Logical_Expression_NR:
		//	exclamation=EXCLAMATION (expression=Expression | LPAREN expression=Expression RPAREN) | LPAREN expression=Expression
		//	RPAREN
		//	| true=TRUE
		//	| false=FALSE;
		@Override public ParserRule getRule() { return rule; }

		//exclamation=EXCLAMATION (expression=Expression | LPAREN expression=Expression RPAREN) | LPAREN expression=Expression
		//RPAREN | true=TRUE | false=FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//exclamation=EXCLAMATION (expression=Expression | LPAREN expression=Expression RPAREN)
		public Group getGroup_0() { return cGroup_0; }

		//exclamation=EXCLAMATION
		public Assignment getExclamationAssignment_0_0() { return cExclamationAssignment_0_0; }

		//EXCLAMATION
		public RuleCall getExclamationEXCLAMATIONTerminalRuleCall_0_0_0() { return cExclamationEXCLAMATIONTerminalRuleCall_0_0_0; }

		//(expression=Expression | LPAREN expression=Expression RPAREN)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1_0() { return cExpressionAssignment_0_1_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0_0() { return cExpressionExpressionParserRuleCall_0_1_0_0; }

		//LPAREN expression=Expression RPAREN
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_1_1_0() { return cLPARENTerminalRuleCall_0_1_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1_1_1() { return cExpressionAssignment_0_1_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_1_1_0() { return cExpressionExpressionParserRuleCall_0_1_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_1_1_2() { return cRPARENTerminalRuleCall_0_1_1_2; }

		//LPAREN expression=Expression RPAREN
		public Group getGroup_1() { return cGroup_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0() { return cLPARENTerminalRuleCall_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_2() { return cRPARENTerminalRuleCall_1_2; }

		//true=TRUE
		public Assignment getTrueAssignment_2() { return cTrueAssignment_2; }

		//TRUE
		public RuleCall getTrueTRUETerminalRuleCall_2_0() { return cTrueTRUETerminalRuleCall_2_0; }

		//false=FALSE
		public Assignment getFalseAssignment_3() { return cFalseAssignment_3; }

		//FALSE
		public RuleCall getFalseFALSETerminalRuleCall_3_0() { return cFalseFALSETerminalRuleCall_3_0; }
	}

	public class Arg_ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Arg_List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//Arg_List:
		//	expression=Expression ("," expressions+=Expression)*;
		@Override public ParserRule getRule() { return rule; }

		//expression=Expression ("," expressions+=Expression)*
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//("," expressions+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class Numeric_Expression_NRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Numeric_Expression_NR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSinal_numericAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSinal_numericAlternatives_0_0 = (Alternatives)cSinal_numericAssignment_0.eContents().get(0);
		private final Keyword cSinal_numericHyphenMinusKeyword_0_0_0 = (Keyword)cSinal_numericAlternatives_0_0.eContents().get(0);
		private final RuleCall cSinal_numericINCREMENTTerminalRuleCall_0_0_1 = (RuleCall)cSinal_numericAlternatives_0_0.eContents().get(1);
		private final RuleCall cSinal_numericDECREMENTTerminalRuleCall_0_0_2 = (RuleCall)cSinal_numericAlternatives_0_0.eContents().get(2);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Numeric_Expression_NR:
		//	sinal_numeric=("-" | INCREMENT | DECREMENT) expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//sinal_numeric=("-" | INCREMENT | DECREMENT) expression=Expression
		public Group getGroup() { return cGroup; }

		//sinal_numeric=("-" | INCREMENT | DECREMENT)
		public Assignment getSinal_numericAssignment_0() { return cSinal_numericAssignment_0; }

		//("-" | INCREMENT | DECREMENT)
		public Alternatives getSinal_numericAlternatives_0_0() { return cSinal_numericAlternatives_0_0; }

		//"-"
		public Keyword getSinal_numericHyphenMinusKeyword_0_0_0() { return cSinal_numericHyphenMinusKeyword_0_0_0; }

		//INCREMENT
		public RuleCall getSinal_numericINCREMENTTerminalRuleCall_0_0_1() { return cSinal_numericINCREMENTTerminalRuleCall_0_0_1; }

		//DECREMENT
		public RuleCall getSinal_numericDECREMENTTerminalRuleCall_0_0_2() { return cSinal_numericDECREMENTTerminalRuleCall_0_0_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class Switch_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Switch_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitch_statementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLParenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLParenLPARENTerminalRuleCall_2_0 = (RuleCall)cLParenAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Assignment cRparentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRparentRPARENTerminalRuleCall_4_0 = (RuleCall)cRparentAssignment_4.eContents().get(0);
		private final RuleCall cR_CURLY_BRACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cCaseKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cExpression2Assignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_6_0_1_0 = (RuleCall)cExpression2Assignment_6_0_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_6_0_2 = (RuleCall)cGroup_6_0.eContents().get(2);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cDefaultKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_6_1_1 = (RuleCall)cGroup_6_1.eContents().get(1);
		private final Assignment cSwitchStatementsAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cSwitchStatementsStatementParserRuleCall_6_2_0 = (RuleCall)cSwitchStatementsAssignment_6_2.eContents().get(0);
		private final RuleCall cL_CURLY_BRACETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		////END EXPRESSIONS	
		//Switch_statement:
		//	{Switch_statement} "switch" lParen=LPAREN expression=Expression rparent=RPAREN R_CURLY_BRACE ("case"
		//	expression2+=Expression COLON | "default" COLON | switchStatements+=Statement)* L_CURLY_BRACE;
		@Override public ParserRule getRule() { return rule; }

		//{Switch_statement} "switch" lParen=LPAREN expression=Expression rparent=RPAREN R_CURLY_BRACE ("case"
		//expression2+=Expression COLON | "default" COLON | switchStatements+=Statement)* L_CURLY_BRACE
		public Group getGroup() { return cGroup; }

		//{Switch_statement}
		public Action getSwitch_statementAction_0() { return cSwitch_statementAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//lParen=LPAREN
		public Assignment getLParenAssignment_2() { return cLParenAssignment_2; }

		//LPAREN
		public RuleCall getLParenLPARENTerminalRuleCall_2_0() { return cLParenLPARENTerminalRuleCall_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_4() { return cRparentAssignment_4; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_4_0() { return cRparentRPARENTerminalRuleCall_4_0; }

		//R_CURLY_BRACE
		public RuleCall getR_CURLY_BRACETerminalRuleCall_5() { return cR_CURLY_BRACETerminalRuleCall_5; }

		//("case" expression2+=Expression COLON | "default" COLON | switchStatements+=Statement)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"case" expression2+=Expression COLON
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"case"
		public Keyword getCaseKeyword_6_0_0() { return cCaseKeyword_6_0_0; }

		//expression2+=Expression
		public Assignment getExpression2Assignment_6_0_1() { return cExpression2Assignment_6_0_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_6_0_1_0() { return cExpression2ExpressionParserRuleCall_6_0_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_6_0_2() { return cCOLONTerminalRuleCall_6_0_2; }

		//"default" COLON
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"default"
		public Keyword getDefaultKeyword_6_1_0() { return cDefaultKeyword_6_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_6_1_1() { return cCOLONTerminalRuleCall_6_1_1; }

		//switchStatements+=Statement
		public Assignment getSwitchStatementsAssignment_6_2() { return cSwitchStatementsAssignment_6_2; }

		//Statement
		public RuleCall getSwitchStatementsStatementParserRuleCall_6_2_0() { return cSwitchStatementsStatementParserRuleCall_6_2_0; }

		//L_CURLY_BRACE
		public RuleCall getL_CURLY_BRACETerminalRuleCall_7() { return cL_CURLY_BRACETerminalRuleCall_7; }
	}

	public class While_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.While_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cRparentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRparentRPARENTerminalRuleCall_2_0 = (RuleCall)cRparentAssignment_2.eContents().get(0);
		private final Assignment cWhileStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhileStatementStatementParserRuleCall_3_0 = (RuleCall)cWhileStatementAssignment_3.eContents().get(0);
		
		//While_Statement:
		//	"while(" expression=Expression rparent=RPAREN whileStatement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"while(" expression=Expression rparent=RPAREN whileStatement=Statement
		public Group getGroup() { return cGroup; }

		//"while("
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_2() { return cRparentAssignment_2; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_2_0() { return cRparentRPARENTerminalRuleCall_2_0; }

		//whileStatement=Statement
		public Assignment getWhileStatementAssignment_3() { return cWhileStatementAssignment_3; }

		//Statement
		public RuleCall getWhileStatementStatementParserRuleCall_3_0() { return cWhileStatementStatementParserRuleCall_3_0; }
	}

	public class Do_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Do_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDoStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDoStatementStatementParserRuleCall_1_0 = (RuleCall)cDoStatementAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLparentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLparentLPARENTerminalRuleCall_3_0 = (RuleCall)cLparentAssignment_3.eContents().get(0);
		private final Assignment cRparentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRparentRPARENTerminalRuleCall_4_0 = (RuleCall)cRparentAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Do_Statement:
		//	"do" doStatement=Statement "while" lparent=LPAREN / *doWhileExpression = Expression* / rparent=RPAREN ";";
		@Override public ParserRule getRule() { return rule; }

		//"do" doStatement=Statement "while" lparent=LPAREN / *doWhileExpression = Expression* / rparent=RPAREN ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//doStatement=Statement
		public Assignment getDoStatementAssignment_1() { return cDoStatementAssignment_1; }

		//Statement
		public RuleCall getDoStatementStatementParserRuleCall_1_0() { return cDoStatementStatementParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//lparent=LPAREN
		public Assignment getLparentAssignment_3() { return cLparentAssignment_3; }

		//LPAREN
		public RuleCall getLparentLPARENTerminalRuleCall_3_0() { return cLparentLPARENTerminalRuleCall_3_0; }

		/// *doWhileExpression = Expression* / rparent=RPAREN
		public Assignment getRparentAssignment_4() { return cRparentAssignment_4; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_4_0() { return cRparentRPARENTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class If_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.If_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLparenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLparenLPARENTerminalRuleCall_1_0 = (RuleCall)cLparenAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cRparentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRparentRPARENTerminalRuleCall_3_0 = (RuleCall)cRparentAssignment_3.eContents().get(0);
		private final Assignment cIdStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdStatementStatementParserRuleCall_4_0 = (RuleCall)cIdStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//If_statement:
		//	"if" lparen=LPAREN expression=Expression rparent=RPAREN idStatement=Statement (=> "else" elseStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"if" lparen=LPAREN expression=Expression rparent=RPAREN idStatement=Statement (=> "else" elseStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//lparen=LPAREN
		public Assignment getLparenAssignment_1() { return cLparenAssignment_1; }

		//LPAREN
		public RuleCall getLparenLPARENTerminalRuleCall_1_0() { return cLparenLPARENTerminalRuleCall_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//rparent=RPAREN
		public Assignment getRparentAssignment_3() { return cRparentAssignment_3; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_3_0() { return cRparentRPARENTerminalRuleCall_3_0; }

		//idStatement=Statement
		public Assignment getIdStatementAssignment_4() { return cIdStatementAssignment_4; }

		//Statement
		public RuleCall getIdStatementStatementParserRuleCall_4_0() { return cIdStatementStatementParserRuleCall_4_0; }

		//(=> "else" elseStatement=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseStatement=Statement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_5_1_0() { return cElseStatementStatementParserRuleCall_5_1_0; }
	}

	public class Try_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Try_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTryStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTryStatementStatementParserRuleCall_1_0 = (RuleCall)cTryStatementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCatchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLParenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLParenLPARENTerminalRuleCall_2_1_0 = (RuleCall)cLParenAssignment_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_2_0 = (RuleCall)cParametersAssignment_2_2.eContents().get(0);
		private final Assignment cRparentAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRparentRPARENTerminalRuleCall_2_3_0 = (RuleCall)cRparentAssignment_2_3.eContents().get(0);
		private final Assignment cCatchStatementAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cCatchStatementStatementParserRuleCall_2_4_0 = (RuleCall)cCatchStatementAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFinallyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFinallyStatementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFinallyStatementStatementParserRuleCall_3_1_0 = (RuleCall)cFinallyStatementAssignment_3_1.eContents().get(0);
		
		//Try_statement:
		//	"try" tryStatement=Statement (=> "catch" lParen+=LPAREN parameters+=Parameter rparent+=RPAREN
		//	catchStatement+=Statement)* (=> "finally" finallyStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"try" tryStatement=Statement (=> "catch" lParen+=LPAREN parameters+=Parameter rparent+=RPAREN
		//catchStatement+=Statement)* (=> "finally" finallyStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//tryStatement=Statement
		public Assignment getTryStatementAssignment_1() { return cTryStatementAssignment_1; }

		//Statement
		public RuleCall getTryStatementStatementParserRuleCall_1_0() { return cTryStatementStatementParserRuleCall_1_0; }

		//(=> "catch" lParen+=LPAREN parameters+=Parameter rparent+=RPAREN catchStatement+=Statement)*
		public Group getGroup_2() { return cGroup_2; }

		//=> "catch"
		public Keyword getCatchKeyword_2_0() { return cCatchKeyword_2_0; }

		//lParen+=LPAREN
		public Assignment getLParenAssignment_2_1() { return cLParenAssignment_2_1; }

		//LPAREN
		public RuleCall getLParenLPARENTerminalRuleCall_2_1_0() { return cLParenLPARENTerminalRuleCall_2_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2() { return cParametersAssignment_2_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_0() { return cParametersParameterParserRuleCall_2_2_0; }

		//rparent+=RPAREN
		public Assignment getRparentAssignment_2_3() { return cRparentAssignment_2_3; }

		//RPAREN
		public RuleCall getRparentRPARENTerminalRuleCall_2_3_0() { return cRparentRPARENTerminalRuleCall_2_3_0; }

		//catchStatement+=Statement
		public Assignment getCatchStatementAssignment_2_4() { return cCatchStatementAssignment_2_4; }

		//Statement
		public RuleCall getCatchStatementStatementParserRuleCall_2_4_0() { return cCatchStatementStatementParserRuleCall_2_4_0; }

		//(=> "finally" finallyStatement=Statement)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "finally"
		public Keyword getFinallyKeyword_3_0() { return cFinallyKeyword_3_0; }

		//finallyStatement=Statement
		public Assignment getFinallyStatementAssignment_3_1() { return cFinallyStatementAssignment_3_1; }

		//Statement
		public RuleCall getFinallyStatementStatementParserRuleCall_3_1_0() { return cFinallyStatementStatementParserRuleCall_3_1_0; }
	}

	public class Import_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Import_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cClassNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cClassNameClass_nameParserRuleCall_1_0_0_0 = (RuleCall)cClassNameAssignment_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cPacNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPacNamePackage_nameParserRuleCall_1_1_0_0 = (RuleCall)cPacNameAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopAsteriskSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		////FIXME:força a descer por className --  | interfaceName = Interface_name";"
		//Import_statement:
		//	"import" (className=Class_name ";" | pacName=Package_name ".*;");
		@Override public ParserRule getRule() { return rule; }

		//"import" (className=Class_name ";" | pacName=Package_name ".*;")
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//(className=Class_name ";" | pacName=Package_name ".*;")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//className=Class_name ";"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//className=Class_name
		public Assignment getClassNameAssignment_1_0_0() { return cClassNameAssignment_1_0_0; }

		//Class_name
		public RuleCall getClassNameClass_nameParserRuleCall_1_0_0_0() { return cClassNameClass_nameParserRuleCall_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }

		//pacName=Package_name ".*;"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//pacName=Package_name
		public Assignment getPacNameAssignment_1_1_0() { return cPacNameAssignment_1_1_0; }

		//Package_name
		public RuleCall getPacNamePackage_nameParserRuleCall_1_1_0_0() { return cPacNamePackage_nameParserRuleCall_1_1_0_0; }

		//".*;"
		public Keyword getFullStopAsteriskSemicolonKeyword_1_1_1() { return cFullStopAsteriskSemicolonKeyword_1_1_1; }
	}

	public class Class_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Class_name");
		private final RuleCall cPackage_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Class_name:
		//	Package_name;
		@Override public ParserRule getRule() { return rule; }

		//Package_name
		public RuleCall getPackage_nameParserRuleCall() { return cPackage_nameParserRuleCall; }
	}

	public class Interface_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Interface_name");
		private final RuleCall cPackage_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Interface_name:
		//	Package_name;
		@Override public ParserRule getRule() { return rule; }

		//Package_name
		public RuleCall getPackage_nameParserRuleCall() { return cPackage_nameParserRuleCall; }
	}

	public class Package_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Package_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPacNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPacNamePackage_nameParserRuleCall_1_0 = (RuleCall)cPacNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package_statement:
		//	"package" pacName=Package_name ";";
		@Override public ParserRule getRule() { return rule; }

		//"package" pacName=Package_name ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//pacName=Package_name
		public Assignment getPacNameAssignment_1() { return cPacNameAssignment_1; }

		//Package_name
		public RuleCall getPacNamePackage_nameParserRuleCall_1_0() { return cPacNamePackage_nameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Package_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Package_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackage_name_lineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package_name:
		//	ID Package_name_line;
		@Override public ParserRule getRule() { return rule; }

		//ID Package_name_line
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Package_name_line
		public RuleCall getPackage_name_lineParserRuleCall_1() { return cPackage_name_lineParserRuleCall_1; }
	}

	public class Package_name_lineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Package_name_line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package_name_line:
		//	"." ID*;
		@Override public ParserRule getRule() { return rule; }

		//"." ID*
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EXPOENT_PARTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXPOENT_PART");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEXPONENTIALTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EXPOENT_PART:
		//	EXPONENTIAL DECIMAL_DIGITS;
		@Override public ParserRule getRule() { return rule; }

		//EXPONENTIAL DECIMAL_DIGITS
		public Group getGroup() { return cGroup; }

		//EXPONENTIAL
		public RuleCall getEXPONENTIALTerminalRuleCall_0() { return cEXPONENTIALTerminalRuleCall_0; }

		//DECIMAL_DIGITS
		public RuleCall getDECIMAL_DIGITSTerminalRuleCall_1() { return cDECIMAL_DIGITSTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final Compilation_unitElements pCompilation_unit;
	private final Type_declarationElements pType_declaration;
	private final TerminalRule tINTERFACE;
	private final TerminalRule tEXTENDS;
	private final TerminalRule tR_CURLY_BRACE;
	private final TerminalRule tL_CURLY_BRACE;
	private final Interface_declarationElements pInterface_declaration;
	private final Class_declarationElements pClass_declaration;
	private final Field_declarationElements pField_declaration;
	private final Method_declarationElements pMethod_declaration;
	private final Constructor_declarationElements pConstructor_declaration;
	private final Parameter_listElements pParameter_list;
	private final ParameterElements pParameter;
	private final Variable_declarationElements pVariable_declaration;
	private final Variable_declaratorElements pVariable_declarator;
	private final Variable_initializerElements pVariable_initializer;
	private final Array_initializerElements pArray_initializer;
	private final TypeElements pType;
	private final TerminalRule tCHAR;
	private final Type_specifierElements pType_specifier;
	private final ModifierElements pModifier;
	private final TerminalRule tSTATIC;
	private final Static_initializerElements pStatic_initializer;
	private final Statement_blockElements pStatement_block;
	private final StatementElements pStatement;
	private final For_StatementElements pFor_Statement;
	private final ExpressionElements pExpression;
	private final TerminalRule tNULL;
	private final TerminalRule tTHIS;
	private final TerminalRule tSUPER;
	private final Expression_auxElements pExpression_aux;
	private final TerminalRule tINSTANCEOF;
	private final TerminalRule tOR_LOGIC;
	private final TerminalRule tAND;
	private final TerminalRule tL_SHIFT;
	private final TerminalRule tR_SHIFT;
	private final TerminalRule tSUPER_SHIFT;
	private final TerminalRule tR_SHIFT_EQUAL;
	private final TerminalRule tDOUBLE_OR_EQUAL;
	private final TerminalRule tOR;
	private final TerminalRule tOR_EQUAL;
	private final TerminalRule tEXP;
	private final TerminalRule tEXP_EQUAL;
	private final TerminalRule tDOUBLE_EQUAL;
	private final TerminalRule tDIFFERENT;
	private final TerminalRule tBT;
	private final TerminalRule tST;
	private final TerminalRule tBE;
	private final TerminalRule tSE;
	private final TerminalRule tDIVIDE;
	private final TerminalRule tDIVIDE_EQUAL;
	private final TerminalRule tMODULE;
	private final TerminalRule tMODULE_EQUAL;
	private final TerminalRule tPLUS_EQUAL;
	private final TerminalRule tMINUS_EQUAL;
	private final TerminalRule tMULTIPLY;
	private final TerminalRule tMULTIPLY_EQUAL;
	private final TerminalRule tWAT;
	private final Ampersand_RuleElements pAmpersand_Rule;
	private final TerminalRule tAMPERSAND;
	private final Float_LiteralElements pFloat_Literal;
	private final TerminalRule tEXPONENTIAL;
	private final Literal_ExpressionElements pLiteral_Expression;
	private final TerminalRule tLONG;
	private final TerminalRule tSTRING;
	private final Creating_ExpressionElements pCreating_Expression;
	private final TerminalRule tCOLON;
	private final TerminalRule tNEW;
	private final Cast_ExpressionElements pCast_Expression;
	private final Bit_Expression_NRElements pBit_Expression_NR;
	private final TerminalRule tNOT;
	private final Logical_Expression_NRElements pLogical_Expression_NR;
	private final TerminalRule tEXCLAMATION;
	private final TerminalRule tFALSE;
	private final TerminalRule tTRUE;
	private final Arg_ListElements pArg_List;
	private final Numeric_Expression_NRElements pNumeric_Expression_NR;
	private final TerminalRule tDECREMENT;
	private final TerminalRule tINCREMENT;
	private final Switch_statementElements pSwitch_statement;
	private final While_StatementElements pWhile_Statement;
	private final Do_StatementElements pDo_Statement;
	private final If_statementElements pIf_statement;
	private final Try_statementElements pTry_statement;
	private final Import_statementElements pImport_statement;
	private final Class_nameElements pClass_name;
	private final Interface_nameElements pInterface_name;
	private final Package_statementElements pPackage_statement;
	private final Package_nameElements pPackage_name;
	private final Package_name_lineElements pPackage_name_line;
	private final EXPOENT_PARTElements pEXPOENT_PART;
	private final TerminalRule tHEXA;
	private final TerminalRule tDECIMAL_DIGITS;
	private final TerminalRule tOCTAL_LITERAL;
	private final TerminalRule tFLOAT_TYPE_SUFIX;
	private final TerminalRule tINTEGER_TYPE_SUFFIX;
	private final TerminalRule tFLOATING_POINT_LITERAL;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tFLOAT_TYPE_SUFFIX;
	private final TerminalRule tCHARACTER_LITERAL;
	private final TerminalRule tESCAPE_SEQUENCE;
	private final TerminalRule tOCTAL_ESCAPE;
	private final TerminalRule tRPAREN;
	private final TerminalRule tLPAREN;
	private final TerminalRule tMOD;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tDOC_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pCompilation_unit = new Compilation_unitElements();
		this.pType_declaration = new Type_declarationElements();
		this.tINTERFACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTERFACE");
		this.tEXTENDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXTENDS");
		this.tR_CURLY_BRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.R_CURLY_BRACE");
		this.tL_CURLY_BRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.L_CURLY_BRACE");
		this.pInterface_declaration = new Interface_declarationElements();
		this.pClass_declaration = new Class_declarationElements();
		this.pField_declaration = new Field_declarationElements();
		this.pMethod_declaration = new Method_declarationElements();
		this.pConstructor_declaration = new Constructor_declarationElements();
		this.pParameter_list = new Parameter_listElements();
		this.pParameter = new ParameterElements();
		this.pVariable_declaration = new Variable_declarationElements();
		this.pVariable_declarator = new Variable_declaratorElements();
		this.pVariable_initializer = new Variable_initializerElements();
		this.pArray_initializer = new Array_initializerElements();
		this.pType = new TypeElements();
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CHAR");
		this.pType_specifier = new Type_specifierElements();
		this.pModifier = new ModifierElements();
		this.tSTATIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STATIC");
		this.pStatic_initializer = new Static_initializerElements();
		this.pStatement_block = new Statement_blockElements();
		this.pStatement = new StatementElements();
		this.pFor_Statement = new For_StatementElements();
		this.pExpression = new ExpressionElements();
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NULL");
		this.tTHIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.THIS");
		this.tSUPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SUPER");
		this.pExpression_aux = new Expression_auxElements();
		this.tINSTANCEOF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INSTANCEOF");
		this.tOR_LOGIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OR_LOGIC");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AND");
		this.tL_SHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.L_SHIFT");
		this.tR_SHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.R_SHIFT");
		this.tSUPER_SHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SUPER_SHIFT");
		this.tR_SHIFT_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.R_SHIFT_EQUAL");
		this.tDOUBLE_OR_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE_OR_EQUAL");
		this.tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OR");
		this.tOR_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OR_EQUAL");
		this.tEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXP");
		this.tEXP_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXP_EQUAL");
		this.tDOUBLE_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE_EQUAL");
		this.tDIFFERENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIFFERENT");
		this.tBT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BT");
		this.tST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ST");
		this.tBE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BE");
		this.tSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SE");
		this.tDIVIDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIVIDE");
		this.tDIVIDE_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIVIDE_EQUAL");
		this.tMODULE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MODULE");
		this.tMODULE_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MODULE_EQUAL");
		this.tPLUS_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PLUS_EQUAL");
		this.tMINUS_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MINUS_EQUAL");
		this.tMULTIPLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MULTIPLY");
		this.tMULTIPLY_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MULTIPLY_EQUAL");
		this.tWAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WAT");
		this.pAmpersand_Rule = new Ampersand_RuleElements();
		this.tAMPERSAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AMPERSAND");
		this.pFloat_Literal = new Float_LiteralElements();
		this.tEXPONENTIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXPONENTIAL");
		this.pLiteral_Expression = new Literal_ExpressionElements();
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LONG");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING");
		this.pCreating_Expression = new Creating_ExpressionElements();
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.COLON");
		this.tNEW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NEW");
		this.pCast_Expression = new Cast_ExpressionElements();
		this.pBit_Expression_NR = new Bit_Expression_NRElements();
		this.tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NOT");
		this.pLogical_Expression_NR = new Logical_Expression_NRElements();
		this.tEXCLAMATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXCLAMATION");
		this.tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FALSE");
		this.tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TRUE");
		this.pArg_List = new Arg_ListElements();
		this.pNumeric_Expression_NR = new Numeric_Expression_NRElements();
		this.tDECREMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECREMENT");
		this.tINCREMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INCREMENT");
		this.pSwitch_statement = new Switch_statementElements();
		this.pWhile_Statement = new While_StatementElements();
		this.pDo_Statement = new Do_StatementElements();
		this.pIf_statement = new If_statementElements();
		this.pTry_statement = new Try_statementElements();
		this.pImport_statement = new Import_statementElements();
		this.pClass_name = new Class_nameElements();
		this.pInterface_name = new Interface_nameElements();
		this.pPackage_statement = new Package_statementElements();
		this.pPackage_name = new Package_nameElements();
		this.pPackage_name_line = new Package_name_lineElements();
		this.pEXPOENT_PART = new EXPOENT_PARTElements();
		this.tHEXA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HEXA");
		this.tDECIMAL_DIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECIMAL_DIGITS");
		this.tOCTAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OCTAL_LITERAL");
		this.tFLOAT_TYPE_SUFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FLOAT_TYPE_SUFIX");
		this.tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTEGER_TYPE_SUFFIX");
		this.tFLOATING_POINT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FLOATING_POINT_LITERAL");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXPONENT");
		this.tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FLOAT_TYPE_SUFFIX");
		this.tCHARACTER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CHARACTER_LITERAL");
		this.tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ESCAPE_SEQUENCE");
		this.tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OCTAL_ESCAPE");
		this.tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RPAREN");
		this.tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LPAREN");
		this.tMOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MOD");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WS");
		this.tDOC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOC_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	greetings+=Compilation_unit;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Compilation_unit:
	//	{Compilation_unit} name=Package_statement? imports+=Import_statement* typeDeclarations+=Type_declaration*;
	public Compilation_unitElements getCompilation_unitAccess() {
		return pCompilation_unit;
	}
	
	public ParserRule getCompilation_unitRule() {
		return getCompilation_unitAccess().getRule();
	}

	//Type_declaration:
	//	comment=DOC_COMMENT? (classDec=Class_declaration | interfaceDec=Interface_declaration) ";";
	public Type_declarationElements getType_declarationAccess() {
		return pType_declaration;
	}
	
	public ParserRule getType_declarationRule() {
		return getType_declarationAccess().getRule();
	}

	//terminal INTERFACE:
	//	"interface";
	public TerminalRule getINTERFACERule() {
		return tINTERFACE;
	} 

	//terminal EXTENDS:
	//	"extends";
	public TerminalRule getEXTENDSRule() {
		return tEXTENDS;
	} 

	//terminal R_CURLY_BRACE:
	//	"{";
	public TerminalRule getR_CURLY_BRACERule() {
		return tR_CURLY_BRACE;
	} 

	//terminal L_CURLY_BRACE:
	//	"}";
	public TerminalRule getL_CURLY_BRACERule() {
		return tL_CURLY_BRACE;
	} 

	//Interface_declaration:
	//	modifiers+=Modifier* INTERFACE interfaceName=ID (EXTENDS interfaceHerdada=Interface_name (","
	//	interfacesHerdadas+=Interface_name)*)? R_CURLY_BRACE fieldsDeclaration+=Field_declaration* L_CURLY_BRACE;
	public Interface_declarationElements getInterface_declarationAccess() {
		return pInterface_declaration;
	}
	
	public ParserRule getInterface_declarationRule() {
		return getInterface_declarationAccess().getRule();
	}

	//Class_declaration:
	//	modifiers+=Modifier* "class" className=ID (EXTENDS classHerdada=Class_name)? ("implements"
	//	interfaceImplementada=Interface_name ("," interfacesImplementadas+=Interface_name)*)? R_CURLY_BRACE
	//	fieldsDeclaration+=Field_declaration* L_CURLY_BRACE;
	public Class_declarationElements getClass_declarationAccess() {
		return pClass_declaration;
	}
	
	public ParserRule getClass_declarationRule() {
		return getClass_declarationAccess().getRule();
	}

	//Field_declaration:
	//	comment=DOC_COMMENT? (variableDeclaration=Variable_declaration | contructorName=Constructor_declaration |
	//	methodName=Method_declaration) | staticinitializer=Static_initializer | {Field_declaration} ";";
	public Field_declarationElements getField_declarationAccess() {
		return pField_declaration;
	}
	
	public ParserRule getField_declarationRule() {
		return getField_declarationAccess().getRule();
	}

	//Method_declaration:
	//	modifiersMethod+=Modifier* typeMethod=Type nameMethod=ID
	//	lParen=LPAREN parameterListMethod=Parameter_list? rparent=RPAREN ("[" "]")* (statementMethod=Statement_block |
	//	debug=";");
	public Method_declarationElements getMethod_declarationAccess() {
		return pMethod_declaration;
	}
	
	public ParserRule getMethod_declarationRule() {
		return getMethod_declarationAccess().getRule();
	}

	//Constructor_declaration:
	//	modifiersConstructor+=Modifier* nameConstructor=ID
	//	lParen=LPAREN parameterListConstructor=Parameter_list? rparent=RPAREN statementConstructor=Statement_block;
	public Constructor_declarationElements getConstructor_declarationAccess() {
		return pConstructor_declaration;
	}
	
	public ParserRule getConstructor_declarationRule() {
		return getConstructor_declarationAccess().getRule();
	}

	//Parameter_list:
	//	parameter=Parameter ("," parameters+=Parameter)*;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}

	//Parameter:
	//	type=Type parameterName=ID ("[" "]" | "[]")*;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Variable_declaration:
	//	modifiersVariable+=Modifier* type=Type nameVariable=Variable_declarator ("," names+=Variable_declarator)* ";";
	public Variable_declarationElements getVariable_declarationAccess() {
		return pVariable_declaration;
	}
	
	public ParserRule getVariable_declarationRule() {
		return getVariable_declarationAccess().getRule();
	}

	//Variable_declarator:
	//	nameVariable=ID (lenVector+="[" "]" | lenVector+="[]")* ("=" vari=Variable_initializer)?;
	public Variable_declaratorElements getVariable_declaratorAccess() {
		return pVariable_declarator;
	}
	
	public ParserRule getVariable_declaratorRule() {
		return getVariable_declaratorAccess().getRule();
	}

	//Variable_initializer:
	//	array_init=Array_initializer | expression=Expression;
	public Variable_initializerElements getVariable_initializerAccess() {
		return pVariable_initializer;
	}
	
	public ParserRule getVariable_initializerRule() {
		return getVariable_initializerAccess().getRule();
	}

	//Array_initializer:
	//	{Array_initializer} R_CURLY_BRACE (variableinitializer+=Variable_initializer (","
	//	variableinitializer+=Variable_initializer)* ','?)? L_CURLY_BRACE;
	public Array_initializerElements getArray_initializerAccess() {
		return pArray_initializer;
	}
	
	public ParserRule getArray_initializerRule() {
		return getArray_initializerAccess().getRule();
	}

	//Type:
	//	typeSpecifier=Type_specifier typeVector+="[]"*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal CHAR:
	//	"'" . "'";
	public TerminalRule getCHARRule() {
		return tCHAR;
	} 

	//Type_specifier:
	//	primitiveType=("boolean"
	//	| "byte"
	//	| "char"
	//	| "short"
	//	| "int"
	//	| "float"
	//	| "long"
	//	| "double"
	//	| "void") | className=Class_name;
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}

	//Modifier:
	//	MOD | STATIC;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//terminal STATIC:
	//	"static";
	public TerminalRule getSTATICRule() {
		return tSTATIC;
	} 

	//Static_initializer:
	//	static=STATIC name=Statement_block;
	public Static_initializerElements getStatic_initializerAccess() {
		return pStatic_initializer;
	}
	
	public ParserRule getStatic_initializerRule() {
		return getStatic_initializerAccess().getRule();
	}

	//Statement_block:
	//	{Statement_block} rCurly=R_CURLY_BRACE statments+=Statement* lCurly=L_CURLY_BRACE;
	public Statement_blockElements getStatement_blockAccess() {
		return pStatement_block;
	}
	
	public ParserRule getStatement_blockRule() {
		return getStatement_blockAccess().getRule();
	}

	////FIXME: resolver Expression em todas operações 
	//Statement:
	//	variableDeclaration=Variable_declaration | expressionStatement+=Expression g=";" | ifStatement=If_statement |
	//	doStatement=Do_Statement | whileStatement=While_Statement | forStatement=For_Statement |
	//	switchStatement=Switch_statement |
	//	"synchronized(" expression=Expression rparent=RPAREN syncStatement=Statement | {Statement} ret="return"
	//	expression=Expression? ";" | {Statement} "throw" expression=Expression? ";" | statementBlock=Statement_block |
	//	tryStatement=Try_statement | nameStatement=ID COLON statement=Statement | {Statement} "break" name=ID? ";" |
	//	{Statement} "continue" name=ID? ";" | {Statement} ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	////##################################  For
	//For_Statement:
	//	"for" LPAREN (variable=Variable_declaration | ";" | expression=Expression ";") expression2=Expression? ";"
	//	expression3=Expression?
	//	RPAREN statement=Statement;
	public For_StatementElements getFor_StatementAccess() {
		return pFor_Statement;
	}
	
	public ParserRule getFor_StatementRule() {
		return getFor_StatementAccess().getRule();
	}

	////################################## EXPRESSOES
	//Expression:
	//	=> (numericExpression3=Numeric_Expression_NR) aux=Expression_aux
	//	| logicalExpression=Logical_Expression_NR aux=Expression_aux
	//	| bitExpression=Bit_Expression_NR aux=Expression_aux
	//	| => (castExpression=Cast_Expression) aux=Expression_aux
	//	| => (creatingExpression=Creating_Expression) aux=Expression_aux
	//	| literalExpression=Literal_Expression aux=Expression_aux
	//	| null=NULL aux=Expression_aux
	//	| super=SUPER aux=Expression_aux
	//	| this=THIS aux=Expression_aux
	//	| name=ID aux=Expression_aux;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//terminal NULL:
	//	"NULL";
	public TerminalRule getNULLRule() {
		return tNULL;
	} 

	//terminal THIS:
	//	"this";
	public TerminalRule getTHISRule() {
		return tTHIS;
	} 

	//terminal SUPER:
	//	"super";
	public TerminalRule getSUPERRule() {
		return tSUPER;
	} 

	//Expression_aux:
	//	(LPAREN argList=Arg_List? RPAREN) aux=Expression_aux
	//	| ("[" expression2=Expression "]") aux=Expression_aux
	//	| ('.' expression2=Expression) aux=Expression_aux
	//	| ("," expressionComma=Expression) aux=Expression_aux
	//	| (INSTANCEOF name=Class_name) aux=Expression_aux
	//	| sgin=(INCREMENT | DECREMENT) aux=Expression_aux | numericSign=("+" | PLUS_EQUAL | "-" | MINUS_EQUAL | MULTIPLY |
	//	MULTIPLY_EQUAL | DIVIDE | DIVIDE_EQUAL | MODULE | MODULE_EQUAL) exp2=Expression aux=Expression_aux | testingSign=(BT
	//	| ST | BE | SE | DOUBLE_EQUAL | DIFFERENT) exp1=Expression aux=Expression_aux | (logicalSign=(OR | OR_EQUAL | EXP |
	//	EXP_EQUAL | DOUBLE_OR_EQUAL | MODULE | MODULE_EQUAL) | ampersand=Ampersand_Rule) exp1=Expression aux=Expression_aux |
	//	WAT exp1=Expression COLON exp2=Expression aux=Expression_aux | stringSign=("+" | PLUS_EQUAL) exp1=Expression
	//	aux=Expression_aux | bitSign=(R_SHIFT_EQUAL | L_SHIFT | R_SHIFT | SUPER_SHIFT) expressionBit=Expression
	//	aux=Expression_aux | logicOp=(OR_LOGIC | AND) logicExp=Expression
	//	| {Expression_aux};
	public Expression_auxElements getExpression_auxAccess() {
		return pExpression_aux;
	}
	
	public ParserRule getExpression_auxRule() {
		return getExpression_auxAccess().getRule();
	}

	//terminal INSTANCEOF:
	//	"instanceof";
	public TerminalRule getINSTANCEOFRule() {
		return tINSTANCEOF;
	} 

	//terminal OR_LOGIC:
	//	"||";
	public TerminalRule getOR_LOGICRule() {
		return tOR_LOGIC;
	} 

	//terminal AND:
	//	"&&";
	public TerminalRule getANDRule() {
		return tAND;
	} 

	//terminal L_SHIFT:
	//	"<<";
	public TerminalRule getL_SHIFTRule() {
		return tL_SHIFT;
	} 

	//terminal R_SHIFT:
	//	">>";
	public TerminalRule getR_SHIFTRule() {
		return tR_SHIFT;
	} 

	//terminal SUPER_SHIFT:
	//	">>>";
	public TerminalRule getSUPER_SHIFTRule() {
		return tSUPER_SHIFT;
	} 

	//terminal R_SHIFT_EQUAL:
	//	">>=";
	public TerminalRule getR_SHIFT_EQUALRule() {
		return tR_SHIFT_EQUAL;
	} 

	//terminal DOUBLE_OR_EQUAL:
	//	"||=";
	public TerminalRule getDOUBLE_OR_EQUALRule() {
		return tDOUBLE_OR_EQUAL;
	} 

	//terminal OR:
	//	"|";
	public TerminalRule getORRule() {
		return tOR;
	} 

	//terminal OR_EQUAL:
	//	"|=";
	public TerminalRule getOR_EQUALRule() {
		return tOR_EQUAL;
	} 

	//terminal EXP:
	//	"^";
	public TerminalRule getEXPRule() {
		return tEXP;
	} 

	//terminal EXP_EQUAL:
	//	"^=";
	public TerminalRule getEXP_EQUALRule() {
		return tEXP_EQUAL;
	} 

	//terminal DOUBLE_EQUAL:
	//	"==";
	public TerminalRule getDOUBLE_EQUALRule() {
		return tDOUBLE_EQUAL;
	} 

	//terminal DIFFERENT:
	//	"!=";
	public TerminalRule getDIFFERENTRule() {
		return tDIFFERENT;
	} 

	//terminal BT:
	//	">";
	public TerminalRule getBTRule() {
		return tBT;
	} 

	//terminal ST:
	//	"<";
	public TerminalRule getSTRule() {
		return tST;
	} 

	//terminal BE:
	//	">=";
	public TerminalRule getBERule() {
		return tBE;
	} 

	//terminal SE:
	//	"<=";
	public TerminalRule getSERule() {
		return tSE;
	} 

	//terminal DIVIDE:
	//	"/";
	public TerminalRule getDIVIDERule() {
		return tDIVIDE;
	} 

	//terminal DIVIDE_EQUAL:
	//	"/=";
	public TerminalRule getDIVIDE_EQUALRule() {
		return tDIVIDE_EQUAL;
	} 

	//terminal MODULE:
	//	"%";
	public TerminalRule getMODULERule() {
		return tMODULE;
	} 

	//terminal MODULE_EQUAL:
	//	"%=";
	public TerminalRule getMODULE_EQUALRule() {
		return tMODULE_EQUAL;
	} 

	//terminal PLUS_EQUAL:
	//	"+=";
	public TerminalRule getPLUS_EQUALRule() {
		return tPLUS_EQUAL;
	} 

	//terminal MINUS_EQUAL:
	//	"-=";
	public TerminalRule getMINUS_EQUALRule() {
		return tMINUS_EQUAL;
	} 

	//terminal MULTIPLY:
	//	"*";
	public TerminalRule getMULTIPLYRule() {
		return tMULTIPLY;
	} 

	//terminal MULTIPLY_EQUAL:
	//	"*=";
	public TerminalRule getMULTIPLY_EQUALRule() {
		return tMULTIPLY_EQUAL;
	} 

	//terminal WAT:
	//	"?";
	public TerminalRule getWATRule() {
		return tWAT;
	} 

	//Ampersand_Rule:
	//	a1=AMPERSAND (a2=AMPERSAND | "=")?;
	public Ampersand_RuleElements getAmpersand_RuleAccess() {
		return pAmpersand_Rule;
	}
	
	public ParserRule getAmpersand_RuleRule() {
		return getAmpersand_RuleAccess().getRule();
	}

	//terminal AMPERSAND:
	//	"ampersand";
	public TerminalRule getAMPERSANDRule() {
		return tAMPERSAND;
	} 

	//Float_Literal:
	//	decimalDigits1=DECIMAL_DIGITS '.' decimalDigits2=DECIMAL_DIGITS? exp=EXPOENT_PART? / *(expoentPart=Expoent_part)?* /
	//	floatTypeSufix=FLOAT_TYPE_SUFIX?;
	public Float_LiteralElements getFloat_LiteralAccess() {
		return pFloat_Literal;
	}
	
	public ParserRule getFloat_LiteralRule() {
		return getFloat_LiteralAccess().getRule();
	}

	//terminal EXPONENTIAL:
	//	'e' | 'e+' | 'e-';
	public TerminalRule getEXPONENTIALRule() {
		return tEXPONENTIAL;
	} 

	//Literal_Expression:
	//	(exp=HEXA LONG? | exp1=DECIMAL_DIGITS LONG?) | exp2=Float_Literal
	//	| string=STRING | charLit=CHAR;
	public Literal_ExpressionElements getLiteral_ExpressionAccess() {
		return pLiteral_Expression;
	}
	
	public ParserRule getLiteral_ExpressionRule() {
		return getLiteral_ExpressionAccess().getRule();
	}

	//terminal LONG:
	//	"l";
	public TerminalRule getLONGRule() {
		return tLONG;
	} 

	//terminal STRING:
	//	'"'->'"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//Creating_Expression:
	//	NEW (className=Class_name LPAREN argList=Arg_List RPAREN | typeSpecifier=Type_specifier ("[" expression=Expression
	//	"]" | "[]")? ("[" "]" | "[]")* | LPAREN expression=Expression RPAREN);
	public Creating_ExpressionElements getCreating_ExpressionAccess() {
		return pCreating_Expression;
	}
	
	public ParserRule getCreating_ExpressionRule() {
		return getCreating_ExpressionAccess().getRule();
	}

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return tCOLON;
	} 

	//terminal NEW:
	//	"new";
	public TerminalRule getNEWRule() {
		return tNEW;
	} 

	//Cast_Expression:
	//	LPAREN type=Type RPAREN expression=Expression;
	public Cast_ExpressionElements getCast_ExpressionAccess() {
		return pCast_Expression;
	}
	
	public ParserRule getCast_ExpressionRule() {
		return getCast_ExpressionAccess().getRule();
	}

	//Bit_Expression_NR:
	//	NOT expression=Expression;
	public Bit_Expression_NRElements getBit_Expression_NRAccess() {
		return pBit_Expression_NR;
	}
	
	public ParserRule getBit_Expression_NRRule() {
		return getBit_Expression_NRAccess().getRule();
	}

	//terminal NOT:
	//	"~";
	public TerminalRule getNOTRule() {
		return tNOT;
	} 

	//Logical_Expression_NR:
	//	exclamation=EXCLAMATION (expression=Expression | LPAREN expression=Expression RPAREN) | LPAREN expression=Expression
	//	RPAREN
	//	| true=TRUE
	//	| false=FALSE;
	public Logical_Expression_NRElements getLogical_Expression_NRAccess() {
		return pLogical_Expression_NR;
	}
	
	public ParserRule getLogical_Expression_NRRule() {
		return getLogical_Expression_NRAccess().getRule();
	}

	//terminal EXCLAMATION:
	//	"!";
	public TerminalRule getEXCLAMATIONRule() {
		return tEXCLAMATION;
	} 

	//terminal FALSE:
	//	'false';
	public TerminalRule getFALSERule() {
		return tFALSE;
	} 

	//terminal TRUE:
	//	'true';
	public TerminalRule getTRUERule() {
		return tTRUE;
	} 

	//Arg_List:
	//	expression=Expression ("," expressions+=Expression)*;
	public Arg_ListElements getArg_ListAccess() {
		return pArg_List;
	}
	
	public ParserRule getArg_ListRule() {
		return getArg_ListAccess().getRule();
	}

	//Numeric_Expression_NR:
	//	sinal_numeric=("-" | INCREMENT | DECREMENT) expression=Expression;
	public Numeric_Expression_NRElements getNumeric_Expression_NRAccess() {
		return pNumeric_Expression_NR;
	}
	
	public ParserRule getNumeric_Expression_NRRule() {
		return getNumeric_Expression_NRAccess().getRule();
	}

	//terminal DECREMENT:
	//	'--';
	public TerminalRule getDECREMENTRule() {
		return tDECREMENT;
	} 

	//terminal INCREMENT:
	//	'++';
	public TerminalRule getINCREMENTRule() {
		return tINCREMENT;
	} 

	////END EXPRESSIONS	
	//Switch_statement:
	//	{Switch_statement} "switch" lParen=LPAREN expression=Expression rparent=RPAREN R_CURLY_BRACE ("case"
	//	expression2+=Expression COLON | "default" COLON | switchStatements+=Statement)* L_CURLY_BRACE;
	public Switch_statementElements getSwitch_statementAccess() {
		return pSwitch_statement;
	}
	
	public ParserRule getSwitch_statementRule() {
		return getSwitch_statementAccess().getRule();
	}

	//While_Statement:
	//	"while(" expression=Expression rparent=RPAREN whileStatement=Statement;
	public While_StatementElements getWhile_StatementAccess() {
		return pWhile_Statement;
	}
	
	public ParserRule getWhile_StatementRule() {
		return getWhile_StatementAccess().getRule();
	}

	//Do_Statement:
	//	"do" doStatement=Statement "while" lparent=LPAREN / *doWhileExpression = Expression* / rparent=RPAREN ";";
	public Do_StatementElements getDo_StatementAccess() {
		return pDo_Statement;
	}
	
	public ParserRule getDo_StatementRule() {
		return getDo_StatementAccess().getRule();
	}

	//If_statement:
	//	"if" lparen=LPAREN expression=Expression rparent=RPAREN idStatement=Statement (=> "else" elseStatement=Statement)?;
	public If_statementElements getIf_statementAccess() {
		return pIf_statement;
	}
	
	public ParserRule getIf_statementRule() {
		return getIf_statementAccess().getRule();
	}

	//Try_statement:
	//	"try" tryStatement=Statement (=> "catch" lParen+=LPAREN parameters+=Parameter rparent+=RPAREN
	//	catchStatement+=Statement)* (=> "finally" finallyStatement=Statement)?;
	public Try_statementElements getTry_statementAccess() {
		return pTry_statement;
	}
	
	public ParserRule getTry_statementRule() {
		return getTry_statementAccess().getRule();
	}

	////FIXME:força a descer por className --  | interfaceName = Interface_name";"
	//Import_statement:
	//	"import" (className=Class_name ";" | pacName=Package_name ".*;");
	public Import_statementElements getImport_statementAccess() {
		return pImport_statement;
	}
	
	public ParserRule getImport_statementRule() {
		return getImport_statementAccess().getRule();
	}

	//Class_name:
	//	Package_name;
	public Class_nameElements getClass_nameAccess() {
		return pClass_name;
	}
	
	public ParserRule getClass_nameRule() {
		return getClass_nameAccess().getRule();
	}

	//Interface_name:
	//	Package_name;
	public Interface_nameElements getInterface_nameAccess() {
		return pInterface_name;
	}
	
	public ParserRule getInterface_nameRule() {
		return getInterface_nameAccess().getRule();
	}

	//Package_statement:
	//	"package" pacName=Package_name ";";
	public Package_statementElements getPackage_statementAccess() {
		return pPackage_statement;
	}
	
	public ParserRule getPackage_statementRule() {
		return getPackage_statementAccess().getRule();
	}

	//Package_name:
	//	ID Package_name_line;
	public Package_nameElements getPackage_nameAccess() {
		return pPackage_name;
	}
	
	public ParserRule getPackage_nameRule() {
		return getPackage_nameAccess().getRule();
	}

	//Package_name_line:
	//	"." ID*;
	public Package_name_lineElements getPackage_name_lineAccess() {
		return pPackage_name_line;
	}
	
	public ParserRule getPackage_name_lineRule() {
		return getPackage_name_lineAccess().getRule();
	}

	//EXPOENT_PART:
	//	EXPONENTIAL DECIMAL_DIGITS;
	public EXPOENT_PARTElements getEXPOENT_PARTAccess() {
		return pEXPOENT_PART;
	}
	
	public ParserRule getEXPOENT_PARTRule() {
		return getEXPOENT_PARTAccess().getRule();
	}

	//terminal HEXA:
	//	'0' 'x' ('0'..'9' 'a'..'f')*;
	public TerminalRule getHEXARule() {
		return tHEXA;
	} 

	//terminal DECIMAL_DIGITS returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getDECIMAL_DIGITSRule() {
		return tDECIMAL_DIGITS;
	} 

	//terminal OCTAL_LITERAL:
	//	'0' '0'..'7'+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return tOCTAL_LITERAL;
	} 

	//terminal FLOAT_TYPE_SUFIX:
	//	'f' | 'd';
	public TerminalRule getFLOAT_TYPE_SUFIXRule() {
		return tFLOAT_TYPE_SUFIX;
	} 

	//terminal fragment INTEGER_TYPE_SUFFIX:
	//	'l' | 'L';
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return tINTEGER_TYPE_SUFFIX;
	} 

	//terminal FLOATING_POINT_LITERAL:
	//	'0'..'9'+ '.' '0'..'9'* EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| '.' '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOATING_POINT_LITERALRule() {
		return tFLOATING_POINT_LITERAL;
	} 

	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	} 

	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	'f' | 'F' | 'd' | 'D';
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return tFLOAT_TYPE_SUFFIX;
	} 

	//terminal CHARACTER_LITERAL:
	//	'\'' (ESCAPE_SEQUENCE | !('\'' | '\\')) '\'';
	public TerminalRule getCHARACTER_LITERALRule() {
		return tCHARACTER_LITERAL;
	} 

	//terminal fragment ESCAPE_SEQUENCE:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\') | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return tESCAPE_SEQUENCE;
	} 

	//terminal fragment OCTAL_ESCAPE:
	//	'\\' '0'..'3' '0'..'7' '0'..'7' | '\\' '0'..'7' '0'..'7' | '\\' '0'..'7';
	public TerminalRule getOCTAL_ESCAPERule() {
		return tOCTAL_ESCAPE;
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return tRPAREN;
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return tLPAREN;
	} 

	//terminal MOD:
	//	"public"
	//	| "private"
	//	| "protected"
	//	| "final"
	//	| "native"
	//	| "synchronized"
	//	| "abstract"
	//	| "threadsafe"
	//	| "transient";
	public TerminalRule getMODRule() {
		return tMOD;
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' | '\u00C0'..'\uFFFF')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	" " | "\t" | "\r" | "\n";
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal DOC_COMMENT:
	//	"/ **";
	public TerminalRule getDOC_COMMENTRule() {
		return tDOC_COMMENT;
	} 
}
